#*****************************************************************************************
# Vivado (TM) v2017.3 (64-bit)
#
# WG800.tcl: Tcl script for re-creating project 'WG800_2_3_18'
#
# Generated by Vivado on Mon Mar 19 23:54:23 -0400 2018
# IP Build 2016188 on Wed Oct  4 21:52:56 MDT 2017
#
# This file contains the Vivado Tcl commands for re-creating the project to the state*
# when this script was generated. In order to re-create the project, please source this
# file in the Vivado Tcl Shell.
#
# * Note that the runs in the created project will be configured the same way as the
#   original project, however they will not be launched automatically. To regenerate the
#   run results please launch the synthesis/implementation runs as needed.
#
#*****************************************************************************************
# NOTE: In order to use this script for source control purposes, please make sure that the
#       following files are added to the source control system:-
#
# 1. This project restoration tcl script (WG800.tcl) that was generated.
#
# 2. The following source(s) files that were local or imported into the original project.
#    (Please see the '$orig_proj_dir' and '$origin_dir' variable setting below at the start of the script)
#
#    "C:/Users/Noah/Desktop/WG800_3_13_18/WG800_2_3_18.srcs/sources_1/new/switchInput.vhd"
#    "C:/Users/Noah/Desktop/WG800_3_13_18/WG800_2_3_18.srcs/sources_1/new/powerSigSplitter.vhd"
#    "C:/Users/Noah/Desktop/WG800_3_13_18/WG800_2_3_18.srcs/sources_1/new/ARB_PWM_Generator.vhd"
#    "C:/Users/Noah/Desktop/WG800_3_13_18/WG800_2_3_18.srcs/sources_1/new/DDS_config.vhd"
#    "C:/Users/Noah/Desktop/WG800_3_13_18/WG800_2_3_18.srcs/sources_1/new/DAC_PREP_PROC.vhd"
#    "C:/Users/Noah/Desktop/WG800_3_13_18/WG800_2_3_18.srcs/sources_1/new/DAC.vhd"
#    "C:/Users/Noah/Desktop/WG800_3_13_18/WG800_2_3_18.srcs/sources_1/bd/TopLevel/hdl/TopLevel_wrapper.vhd"
#    "C:/Users/Noah/Desktop/WG800_3_13_18/WG800_2_3_18.srcs/sources_1/imports/WG800_revB/archive_project_summary.txt"
#    "C:/Users/Noah/Desktop/WG800_3_13_18/WG800_2_3_18.srcs/constrs_1/new/WG800_revB.xdc"
#    "C:/Users/Noah/Desktop/WG800_3_13_18/test_Wave_Generation_Only.vhd"
#    "C:/Users/Noah/Desktop/WG800_3_13_18/WG800_2_3_18.srcs/sim_1/imports/hdl/testbench.vhd"
#    "C:/Users/Noah/Desktop/WG800_3_13_18/WG800_2_3_18.srcs/sim_1/new/wave_generation_tb.vhd"
#    "C:/Users/Noah/Desktop/WG800_3_13_18/test_Wave_Generation_Only_behav.wcfg"
#
# 3. The following remote source files that were added to the original project:-
#
#    <none>
#
#*****************************************************************************************

# Set the reference directory for source file relative paths (by default the value is script directory path)
set origin_dir "."

# Use origin directory path location variable, if specified in the tcl shell
if { [info exists ::origin_dir_loc] } {
  set origin_dir $::origin_dir_loc
}

# Set the project name
set project_name "WG800_2_3_18"

# Use project name variable, if specified in the tcl shell
if { [info exists ::user_project_name] } {
  set project_name $::user_project_name
}

variable script_file
set script_file "WG800.tcl"

# Help information for this script
proc help {} {
  variable script_file
  puts "\nDescription:"
  puts "Recreate a Vivado project from this script. The created project will be"
  puts "functionally equivalent to the original project for which this script was"
  puts "generated. The script contains commands for creating a project, filesets,"
  puts "runs, adding/importing sources and setting properties on various objects.\n"
  puts "Syntax:"
  puts "$script_file"
  puts "$script_file -tclargs \[--origin_dir <path>\]"
  puts "$script_file -tclargs \[--project_name <name>\]"
  puts "$script_file -tclargs \[--help\]\n"
  puts "Usage:"
  puts "Name                   Description"
  puts "-------------------------------------------------------------------------"
  puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
  puts "                       origin_dir path value is \".\", otherwise, the value"
  puts "                       that was set with the \"-paths_relative_to\" switch"
  puts "                       when this script was generated.\n"
  puts "\[--project_name <name>\] Create project with the specified name. Default"
  puts "                       name is the name of the project from where this"
  puts "                       script was generated.\n"
  puts "\[--help\]               Print help information for this script"
  puts "-------------------------------------------------------------------------\n"
  exit 0
}

if { $::argc > 0 } {
  for {set i 0} {$i < [llength $::argc]} {incr i} {
    set option [string trim [lindex $::argv $i]]
    switch -regexp -- $option {
      "--origin_dir"   { incr i; set origin_dir [lindex $::argv $i] }
      "--project_name" { incr i; set project_name [lindex $::argv $i] }
      "--help"         { help }
      default {
        if { [regexp {^-} $option] } {
          puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
          return 1
        }
      }
    }
  }
}

# Set the directory path for the original project from where this script was exported
set orig_proj_dir "[file normalize "$origin_dir/../WG800_3_13_18"]"

# Create project
create_project ${project_name} ./${project_name} -part xc7a35tcsg325-1

# Set the directory path for the new project
set proj_dir [get_property directory [current_project]]

# Reconstruct message rules
# None

# Set project properties
set obj [current_project]
set_property -name "board_connections" -value "" -objects $obj
set_property -name "board_part" -value "" -objects $obj
set_property -name "compxlib.activehdl_compiled_library_dir" -value "$proj_dir/${project_name}.cache/compile_simlib/activehdl" -objects $obj
set_property -name "compxlib.funcsim" -value "1" -objects $obj
set_property -name "compxlib.ies_compiled_library_dir" -value "$proj_dir/${project_name}.cache/compile_simlib/ies" -objects $obj
set_property -name "compxlib.modelsim_compiled_library_dir" -value "$proj_dir/${project_name}.cache/compile_simlib/modelsim" -objects $obj
set_property -name "compxlib.overwrite_libs" -value "0" -objects $obj
set_property -name "compxlib.questa_compiled_library_dir" -value "$proj_dir/${project_name}.cache/compile_simlib/questa" -objects $obj
set_property -name "compxlib.riviera_compiled_library_dir" -value "$proj_dir/${project_name}.cache/compile_simlib/riviera" -objects $obj
set_property -name "compxlib.timesim" -value "1" -objects $obj
set_property -name "compxlib.vcs_compiled_library_dir" -value "$proj_dir/${project_name}.cache/compile_simlib/vcs" -objects $obj
set_property -name "compxlib.xsim_compiled_library_dir" -value "" -objects $obj
set_property -name "corecontainer.enable" -value "0" -objects $obj
set_property -name "default_lib" -value "xil_defaultlib" -objects $obj
set_property -name "dsa.num_compute_units" -value "16" -objects $obj
set_property -name "dsa.rom.debug_type" -value "0" -objects $obj
set_property -name "dsa.rom.prom_type" -value "0" -objects $obj
set_property -name "enable_optional_runs_sta" -value "0" -objects $obj
set_property -name "generate_ip_upgrade_log" -value "1" -objects $obj
set_property -name "ip_cache_permissions" -value "read write" -objects $obj
set_property -name "ip_interface_inference_priority" -value "" -objects $obj
set_property -name "ip_output_repo" -value "$proj_dir/${project_name}.cache/ip" -objects $obj
set_property -name "managed_ip" -value "0" -objects $obj
set_property -name "part" -value "xc7a35tcsg325-1" -objects $obj
set_property -name "pr_flow" -value "0" -objects $obj
set_property -name "sim.ip.auto_export_scripts" -value "1" -objects $obj
set_property -name "sim.use_ip_compiled_libs" -value "1" -objects $obj
set_property -name "simulator_language" -value "VHDL" -objects $obj
set_property -name "source_mgmt_mode" -value "All" -objects $obj
set_property -name "target_language" -value "VHDL" -objects $obj
set_property -name "target_simulator" -value "XSim" -objects $obj
set_property -name "xpm_libraries" -value "XPM_CDC XPM_FIFO XPM_MEMORY" -objects $obj
set_property -name "xsim.array_display_limit" -value "1024" -objects $obj
set_property -name "xsim.radix" -value "hex" -objects $obj
set_property -name "xsim.time_unit" -value "ns" -objects $obj
set_property -name "xsim.trace_limit" -value "65536" -objects $obj

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
# Import local files from the original project
set files [list \
 "[file normalize "$origin_dir/../WG800_3_13_18/WG800_2_3_18.srcs/sources_1/new/switchInput.vhd"]"\
 "[file normalize "$origin_dir/../WG800_3_13_18/WG800_2_3_18.srcs/sources_1/new/powerSigSplitter.vhd"]"\
 "[file normalize "$origin_dir/../WG800_3_13_18/WG800_2_3_18.srcs/sources_1/new/ARB_PWM_Generator.vhd"]"\
 "[file normalize "$origin_dir/../WG800_3_13_18/WG800_2_3_18.srcs/sources_1/new/DDS_config.vhd"]"\
 "[file normalize "$origin_dir/../WG800_3_13_18/WG800_2_3_18.srcs/sources_1/new/DAC_PREP_PROC.vhd"]"\
 "[file normalize "$origin_dir/../WG800_3_13_18/WG800_2_3_18.srcs/sources_1/new/DAC.vhd"]"\
 "[file normalize "$origin_dir/../WG800_3_13_18/WG800_2_3_18.srcs/sources_1/bd/TopLevel/hdl/TopLevel_wrapper.vhd"]"\
 "[file normalize "$origin_dir/../WG800_3_13_18/WG800_2_3_18.srcs/sources_1/imports/WG800_revB/archive_project_summary.txt"]"\
]
set imported_files [import_files -fileset sources_1 $files]

# Set 'sources_1' fileset file properties for remote files
# None

# Set 'sources_1' fileset file properties for local files
set file "new/switchInput.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj
set_property -name "is_enabled" -value "1" -objects $file_obj
set_property -name "is_global_include" -value "0" -objects $file_obj
set_property -name "library" -value "xil_defaultlib" -objects $file_obj
set_property -name "path_mode" -value "RelativeFirst" -objects $file_obj
set_property -name "used_in" -value "synthesis simulation" -objects $file_obj
set_property -name "used_in_simulation" -value "1" -objects $file_obj
set_property -name "used_in_synthesis" -value "1" -objects $file_obj

set file "new/powerSigSplitter.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj
set_property -name "is_enabled" -value "1" -objects $file_obj
set_property -name "is_global_include" -value "0" -objects $file_obj
set_property -name "library" -value "xil_defaultlib" -objects $file_obj
set_property -name "path_mode" -value "RelativeFirst" -objects $file_obj
set_property -name "used_in" -value "synthesis simulation" -objects $file_obj
set_property -name "used_in_simulation" -value "1" -objects $file_obj
set_property -name "used_in_synthesis" -value "1" -objects $file_obj

set file "new/ARB_PWM_Generator.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj
set_property -name "is_enabled" -value "1" -objects $file_obj
set_property -name "is_global_include" -value "0" -objects $file_obj
set_property -name "library" -value "xil_defaultlib" -objects $file_obj
set_property -name "path_mode" -value "RelativeFirst" -objects $file_obj
set_property -name "used_in" -value "synthesis simulation" -objects $file_obj
set_property -name "used_in_simulation" -value "1" -objects $file_obj
set_property -name "used_in_synthesis" -value "1" -objects $file_obj

set file "new/DDS_config.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj
set_property -name "is_enabled" -value "1" -objects $file_obj
set_property -name "is_global_include" -value "0" -objects $file_obj
set_property -name "library" -value "xil_defaultlib" -objects $file_obj
set_property -name "path_mode" -value "RelativeFirst" -objects $file_obj
set_property -name "used_in" -value "synthesis simulation" -objects $file_obj
set_property -name "used_in_simulation" -value "1" -objects $file_obj
set_property -name "used_in_synthesis" -value "1" -objects $file_obj

set file "new/DAC_PREP_PROC.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj
set_property -name "is_enabled" -value "1" -objects $file_obj
set_property -name "is_global_include" -value "0" -objects $file_obj
set_property -name "library" -value "xil_defaultlib" -objects $file_obj
set_property -name "path_mode" -value "RelativeFirst" -objects $file_obj
set_property -name "used_in" -value "synthesis simulation" -objects $file_obj
set_property -name "used_in_simulation" -value "1" -objects $file_obj
set_property -name "used_in_synthesis" -value "1" -objects $file_obj

set file "new/DAC.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj
set_property -name "is_enabled" -value "1" -objects $file_obj
set_property -name "is_global_include" -value "0" -objects $file_obj
set_property -name "library" -value "xil_defaultlib" -objects $file_obj
set_property -name "path_mode" -value "RelativeFirst" -objects $file_obj
set_property -name "used_in" -value "synthesis simulation" -objects $file_obj
set_property -name "used_in_simulation" -value "1" -objects $file_obj
set_property -name "used_in_synthesis" -value "1" -objects $file_obj

set file "hdl/TopLevel_wrapper.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj
set_property -name "is_enabled" -value "1" -objects $file_obj
set_property -name "is_global_include" -value "0" -objects $file_obj
set_property -name "library" -value "xil_defaultlib" -objects $file_obj
set_property -name "path_mode" -value "RelativeFirst" -objects $file_obj
set_property -name "used_in" -value "synthesis simulation" -objects $file_obj
set_property -name "used_in_simulation" -value "1" -objects $file_obj
set_property -name "used_in_synthesis" -value "1" -objects $file_obj

set file "WG800_revB/archive_project_summary.txt"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "is_enabled" -value "1" -objects $file_obj
set_property -name "is_global_include" -value "0" -objects $file_obj
set_property -name "library" -value "xil_defaultlib" -objects $file_obj
set_property -name "path_mode" -value "RelativeFirst" -objects $file_obj
set_property -name "used_in" -value "" -objects $file_obj


# Set 'sources_1' fileset properties
set obj [get_filesets sources_1]
set_property -name "design_mode" -value "RTL" -objects $obj
set_property -name "edif_extra_search_paths" -value "" -objects $obj
set_property -name "elab_link_dcps" -value "1" -objects $obj
set_property -name "elab_load_timing_constraints" -value "1" -objects $obj
set_property -name "generic" -value "" -objects $obj
set_property -name "include_dirs" -value "" -objects $obj
set_property -name "lib_map_file" -value "" -objects $obj
set_property -name "loop_count" -value "1000" -objects $obj
set_property -name "name" -value "sources_1" -objects $obj
set_property -name "top" -value "TopLevel_wrapper" -objects $obj
set_property -name "verilog_define" -value "" -objects $obj
set_property -name "verilog_uppercase" -value "0" -objects $obj

# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
  create_fileset -constrset constrs_1
}

# Set 'constrs_1' fileset object
set obj [get_filesets constrs_1]

# Add/Import constrs file and set constrs file properties
set file "[file normalize "$origin_dir/../WG800_3_13_18/WG800_2_3_18.srcs/constrs_1/new/WG800_revB.xdc"]"
set file_imported [import_files -fileset constrs_1 $file]
set file "new/WG800_revB.xdc"
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj
set_property -name "is_enabled" -value "1" -objects $file_obj
set_property -name "is_global_include" -value "0" -objects $file_obj
set_property -name "library" -value "xil_defaultlib" -objects $file_obj
set_property -name "path_mode" -value "RelativeFirst" -objects $file_obj
set_property -name "processing_order" -value "NORMAL" -objects $file_obj
set_property -name "scoped_to_cells" -value "" -objects $file_obj
set_property -name "scoped_to_ref" -value "" -objects $file_obj
set_property -name "used_in" -value "synthesis implementation" -objects $file_obj
set_property -name "used_in_implementation" -value "1" -objects $file_obj
set_property -name "used_in_synthesis" -value "1" -objects $file_obj

# Set 'constrs_1' fileset properties
set obj [get_filesets constrs_1]
set_property -name "name" -value "constrs_1" -objects $obj
set_property -name "target_constrs_file" -value "[get_files *new/WG800_revB.xdc]" -objects $obj

# Create 'sim_1' fileset (if not found)
if {[string equal [get_filesets -quiet sim_1] ""]} {
  create_fileset -simset sim_1
}

# Set 'sim_1' fileset object
set obj [get_filesets sim_1]
# Import local files from the original project
set files [list \
 "[file normalize "$origin_dir/../WG800_3_13_18/test_Wave_Generation_Only.vhd"]"\
 "[file normalize "$origin_dir/../WG800_3_13_18/WG800_2_3_18.srcs/sim_1/imports/hdl/testbench.vhd"]"\
 "[file normalize "$origin_dir/../WG800_3_13_18/WG800_2_3_18.srcs/sim_1/new/wave_generation_tb.vhd"]"\
 "[file normalize "$origin_dir/../WG800_3_13_18/test_Wave_Generation_Only_behav.wcfg"]"\
]
set imported_files [import_files -fileset sim_1 $files]

# Set 'sim_1' fileset file properties for remote files
# None

# Set 'sim_1' fileset file properties for local files
set file "WG800_3_13_18/test_Wave_Generation_Only.vhd"
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj
set_property -name "is_enabled" -value "1" -objects $file_obj
set_property -name "is_global_include" -value "0" -objects $file_obj
set_property -name "library" -value "xil_defaultlib" -objects $file_obj
set_property -name "path_mode" -value "RelativeFirst" -objects $file_obj
set_property -name "used_in" -value "synthesis simulation" -objects $file_obj
set_property -name "used_in_simulation" -value "1" -objects $file_obj
set_property -name "used_in_synthesis" -value "1" -objects $file_obj

set file "hdl/testbench.vhd"
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj
set_property -name "is_enabled" -value "0" -objects $file_obj
set_property -name "is_global_include" -value "0" -objects $file_obj
set_property -name "library" -value "xil_defaultlib" -objects $file_obj
set_property -name "path_mode" -value "RelativeFirst" -objects $file_obj
set_property -name "used_in" -value "synthesis simulation" -objects $file_obj
set_property -name "used_in_simulation" -value "1" -objects $file_obj
set_property -name "used_in_synthesis" -value "1" -objects $file_obj

set file "new/wave_generation_tb.vhd"
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj
set_property -name "is_enabled" -value "1" -objects $file_obj
set_property -name "is_global_include" -value "0" -objects $file_obj
set_property -name "library" -value "xil_defaultlib" -objects $file_obj
set_property -name "path_mode" -value "RelativeFirst" -objects $file_obj
set_property -name "used_in" -value "synthesis simulation" -objects $file_obj
set_property -name "used_in_simulation" -value "1" -objects $file_obj
set_property -name "used_in_synthesis" -value "1" -objects $file_obj

set file "WG800_3_13_18/test_Wave_Generation_Only_behav.wcfg"
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "is_enabled" -value "1" -objects $file_obj
set_property -name "is_global_include" -value "0" -objects $file_obj
set_property -name "library" -value "xil_defaultlib" -objects $file_obj
set_property -name "path_mode" -value "RelativeFirst" -objects $file_obj
set_property -name "used_in" -value "simulation" -objects $file_obj
set_property -name "used_in_simulation" -value "1" -objects $file_obj


# Set 'sim_1' fileset properties
set obj [get_filesets sim_1]
set_property -name "32bit" -value "0" -objects $obj
set_property -name "generic" -value "" -objects $obj
set_property -name "include_dirs" -value "" -objects $obj
set_property -name "incremental" -value "1" -objects $obj
set_property -name "name" -value "sim_1" -objects $obj
set_property -name "nl.cell" -value "" -objects $obj
set_property -name "nl.incl_unisim_models" -value "0" -objects $obj
set_property -name "nl.process_corner" -value "slow" -objects $obj
set_property -name "nl.rename_top" -value "" -objects $obj
set_property -name "nl.sdf_anno" -value "1" -objects $obj
set_property -name "nl.write_all_overrides" -value "0" -objects $obj
set_property -name "source_set" -value "sources_1" -objects $obj
set_property -name "top" -value "test_Wave_Generation_Only" -objects $obj
set_property -name "transport_int_delay" -value "0" -objects $obj
set_property -name "transport_path_delay" -value "0" -objects $obj
set_property -name "verilog_define" -value "" -objects $obj
set_property -name "verilog_uppercase" -value "0" -objects $obj
set_property -name "xelab.dll" -value "0" -objects $obj
set_property -name "xsim.compile.tcl.pre" -value "" -objects $obj
set_property -name "xsim.compile.xvhdl.more_options" -value "" -objects $obj
set_property -name "xsim.compile.xvhdl.nosort" -value "1" -objects $obj
set_property -name "xsim.compile.xvhdl.relax" -value "1" -objects $obj
set_property -name "xsim.compile.xvlog.more_options" -value "" -objects $obj
set_property -name "xsim.compile.xvlog.nosort" -value "1" -objects $obj
set_property -name "xsim.compile.xvlog.relax" -value "1" -objects $obj
set_property -name "xsim.elaborate.debug_level" -value "typical" -objects $obj
set_property -name "xsim.elaborate.load_glbl" -value "1" -objects $obj
set_property -name "xsim.elaborate.mt_level" -value "auto" -objects $obj
set_property -name "xsim.elaborate.rangecheck" -value "0" -objects $obj
set_property -name "xsim.elaborate.relax" -value "1" -objects $obj
set_property -name "xsim.elaborate.sdf_delay" -value "sdfmax" -objects $obj
set_property -name "xsim.elaborate.snapshot" -value "" -objects $obj
set_property -name "xsim.elaborate.xelab.more_options" -value "" -objects $obj
set_property -name "xsim.simulate.custom_tcl" -value "" -objects $obj
set_property -name "xsim.simulate.log_all_signals" -value "0" -objects $obj
set_property -name "xsim.simulate.runtime" -value "1000ns" -objects $obj
set_property -name "xsim.simulate.saif" -value "" -objects $obj
set_property -name "xsim.simulate.saif_all_signals" -value "0" -objects $obj
set_property -name "xsim.simulate.saif_scope" -value "" -objects $obj
set_property -name "xsim.simulate.tcl.post" -value "" -objects $obj
set_property -name "xsim.simulate.wdb" -value "" -objects $obj
set_property -name "xsim.simulate.xsim.more_options" -value "" -objects $obj


# Adding sources referenced in BDs, if not already added
if { [get_files switchInput.vhd] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Noah/Desktop/WG800_3_13_18/WG800_2_3_18.srcs/sources_1/new/switchInput.vhd
}
if { [get_files powerSigSplitter.vhd] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Noah/Desktop/WG800_3_13_18/WG800_2_3_18.srcs/sources_1/new/powerSigSplitter.vhd
}
if { [get_files ARB_PWM_Generator.vhd] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Noah/Desktop/WG800_3_13_18/WG800_2_3_18.srcs/sources_1/new/ARB_PWM_Generator.vhd
}
if { [get_files DDS_config.vhd] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Noah/Desktop/WG800_3_13_18/WG800_2_3_18.srcs/sources_1/new/DDS_config.vhd
}
if { [get_files DAC_PREP_PROC.vhd] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Noah/Desktop/WG800_3_13_18/WG800_2_3_18.srcs/sources_1/new/DAC_PREP_PROC.vhd
}
if { [get_files DAC.vhd] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Noah/Desktop/WG800_3_13_18/WG800_2_3_18.srcs/sources_1/new/DAC.vhd
}
if { [get_files DAC.vhd] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Noah/Desktop/WG800_3_13_18/WG800_2_3_18.srcs/sources_1/new/DAC.vhd
}
if { [get_files DAC.vhd] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Noah/Desktop/WG800_3_13_18/WG800_2_3_18.srcs/sources_1/new/DAC.vhd
}
if { [get_files DAC.vhd] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Noah/Desktop/WG800_3_13_18/WG800_2_3_18.srcs/sources_1/new/DAC.vhd
}
if { [get_files DAC.vhd] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Noah/Desktop/WG800_3_13_18/WG800_2_3_18.srcs/sources_1/new/DAC.vhd
}
if { [get_files DAC.vhd] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Noah/Desktop/WG800_3_13_18/WG800_2_3_18.srcs/sources_1/new/DAC.vhd
}
if { [get_files DAC.vhd] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Noah/Desktop/WG800_3_13_18/WG800_2_3_18.srcs/sources_1/new/DAC.vhd
}
if { [get_files DAC.vhd] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Noah/Desktop/WG800_3_13_18/WG800_2_3_18.srcs/sources_1/new/DAC.vhd
}


# Proc to create BD TopLevel
proc cr_bd_TopLevel { parentCell } {
# The design that will be created by this Tcl proc contains the following 
# module references:
# AD5443_Proc, AD5443_Proc, AD5443_Proc, AD5443_Proc, AD5443_Proc, AD5443_Proc, AD5443_Proc, AD5443_Proc, ARB_PWM_Generator, DAC_PREP_PROC, DAC_WG_CFG_B, powerSigSplitter, switchDebounce



  # CHANGE DESIGN NAME HERE
  set design_name TopLevel

  common::send_msg_id "BD_TCL-003" "INFO" "Currently there is no design <$design_name> in project, so creating one..."

  create_bd_design $design_name

  set bCheckIPsPassed 1
  ##################################################################
  # CHECK IPs
  ##################################################################
  set bCheckIPs 1
  if { $bCheckIPs == 1 } {
     set list_check_ips "\ 
  xilinx.com:ip:clk_wiz:5.4\
  xilinx.com:ip:proc_sys_reset:5.0\
  xilinx.com:ip:axi_intc:4.1\
  xilinx.com:ip:mdm:3.2\
  xilinx.com:ip:microblaze:10.0\
  xilinx.com:ip:axi_quad_spi:3.2\
  xilinx.com:ip:axi_uartlite:2.0\
  xilinx.com:ip:dds_compiler:6.0\
  xilinx.com:ip:lmb_bram_if_cntlr:4.0\
  xilinx.com:ip:lmb_v10:3.0\
  xilinx.com:ip:blk_mem_gen:8.4\
  xilinx.com:ip:axi_gpio:2.0\
  "

   set list_ips_missing ""
   common::send_msg_id "BD_TCL-006" "INFO" "Checking if the following IPs exist in the project's IP catalog: $list_check_ips ."

   foreach ip_vlnv $list_check_ips {
      set ip_obj [get_ipdefs -all $ip_vlnv]
      if { $ip_obj eq "" } {
         lappend list_ips_missing $ip_vlnv
      }
   }

   if { $list_ips_missing ne "" } {
      catch {common::send_msg_id "BD_TCL-115" "ERROR" "The following IPs are not found in the IP Catalog:\n  $list_ips_missing\n\nResolution: Please add the repository containing the IP(s) to the project." }
      set bCheckIPsPassed 0
   }

  }

  ##################################################################
  # CHECK Modules
  ##################################################################
  set bCheckModules 1
  if { $bCheckModules == 1 } {
     set list_check_mods "\ 
  AD5443_Proc\
  AD5443_Proc\
  AD5443_Proc\
  AD5443_Proc\
  AD5443_Proc\
  AD5443_Proc\
  AD5443_Proc\
  AD5443_Proc\
  ARB_PWM_Generator\
  DAC_PREP_PROC\
  DAC_WG_CFG_B\
  powerSigSplitter\
  switchDebounce\
  "

   set list_mods_missing ""
   common::send_msg_id "BD_TCL-006" "INFO" "Checking if the following modules exist in the project's sources: $list_check_mods ."

   foreach mod_vlnv $list_check_mods {
      if { [can_resolve_reference $mod_vlnv] == 0 } {
         lappend list_mods_missing $mod_vlnv
      }
   }

   if { $list_mods_missing ne "" } {
      catch {common::send_msg_id "BD_TCL-115" "ERROR" "The following module(s) are not found in the project: $list_mods_missing" }
      common::send_msg_id "BD_TCL-008" "INFO" "Please add source files for the missing module(s) above."
      set bCheckIPsPassed 0
   }
}

  if { $bCheckIPsPassed != 1 } {
    common::send_msg_id "BD_TCL-1003" "WARNING" "Will not continue with creation of design due to the error(s) above."
    return 3
  }

  
# Hierarchical cell: Arb_Mem
proc create_hier_cell_Arb_Mem { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_msg_id "BD_TCL-102" "ERROR" "create_hier_cell_Arb_Mem() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -type clk aclk
  create_bd_pin -dir I -from 11 -to 0 addra
  create_bd_pin -dir I -from 11 -to 0 addra1
  create_bd_pin -dir I -from 11 -to 0 addra2
  create_bd_pin -dir I -from 11 -to 0 addra3
  create_bd_pin -dir I -from 11 -to 0 addra4
  create_bd_pin -dir I -from 11 -to 0 addra5
  create_bd_pin -dir I -from 11 -to 0 addra6
  create_bd_pin -dir I -from 11 -to 0 addra7
  create_bd_pin -dir I -from 11 -to 0 addrb
  create_bd_pin -dir I -from 11 -to 0 addrb1
  create_bd_pin -dir I -from 11 -to 0 addrb2
  create_bd_pin -dir I -from 11 -to 0 addrb3
  create_bd_pin -dir I -from 11 -to 0 addrb4
  create_bd_pin -dir I -from 11 -to 0 addrb5
  create_bd_pin -dir I -from 11 -to 0 addrb6
  create_bd_pin -dir I -from 11 -to 0 addrb7
  create_bd_pin -dir I -from 11 -to 0 dina
  create_bd_pin -dir I -from 11 -to 0 dina1
  create_bd_pin -dir I -from 11 -to 0 dina2
  create_bd_pin -dir I -from 11 -to 0 dina3
  create_bd_pin -dir I -from 11 -to 0 dina4
  create_bd_pin -dir I -from 11 -to 0 dina5
  create_bd_pin -dir I -from 11 -to 0 dina6
  create_bd_pin -dir I -from 11 -to 0 dina7
  create_bd_pin -dir O -from 11 -to 0 doutb
  create_bd_pin -dir O -from 11 -to 0 doutb1
  create_bd_pin -dir O -from 11 -to 0 doutb2
  create_bd_pin -dir O -from 11 -to 0 doutb3
  create_bd_pin -dir O -from 11 -to 0 doutb4
  create_bd_pin -dir O -from 11 -to 0 doutb5
  create_bd_pin -dir O -from 11 -to 0 doutb6
  create_bd_pin -dir O -from 11 -to 0 doutb7
  create_bd_pin -dir I enb
  create_bd_pin -dir I enb1
  create_bd_pin -dir I enb2
  create_bd_pin -dir I enb3
  create_bd_pin -dir I enb4
  create_bd_pin -dir I enb5
  create_bd_pin -dir I enb6
  create_bd_pin -dir I enb7
  create_bd_pin -dir I -from 0 -to 0 wea
  create_bd_pin -dir I -from 0 -to 0 wea1
  create_bd_pin -dir I -from 0 -to 0 wea2
  create_bd_pin -dir I -from 0 -to 0 wea3
  create_bd_pin -dir I -from 0 -to 0 wea4
  create_bd_pin -dir I -from 0 -to 0 wea5
  create_bd_pin -dir I -from 0 -to 0 wea6
  create_bd_pin -dir I -from 0 -to 0 wea7

  # Create instance: blk_mem_gen_0, and set properties
  set blk_mem_gen_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_0 ]
  set_property -dict [ list \
   CONFIG.Algorithm {Minimum_Area} \
   CONFIG.Byte_Size {9} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {false} \
   CONFIG.Enable_B {Use_ENB_Pin} \
   CONFIG.Memory_Type {Simple_Dual_Port_RAM} \
   CONFIG.Operating_Mode_A {NO_CHANGE} \
   CONFIG.Port_A_Write_Rate {50} \
   CONFIG.Port_B_Clock {100} \
   CONFIG.Port_B_Enable_Rate {100} \
   CONFIG.Port_B_Write_Rate {0} \
   CONFIG.Read_Width_A {12} \
   CONFIG.Read_Width_B {12} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Register_PortB_Output_of_Memory_Primitives {true} \
   CONFIG.Use_Byte_Write_Enable {false} \
   CONFIG.Use_RSTA_Pin {false} \
   CONFIG.Write_Depth_A {4096} \
   CONFIG.Write_Width_A {12} \
   CONFIG.Write_Width_B {12} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_0

  # Create instance: blk_mem_gen_1, and set properties
  set blk_mem_gen_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_1 ]
  set_property -dict [ list \
   CONFIG.Algorithm {Minimum_Area} \
   CONFIG.Byte_Size {9} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {false} \
   CONFIG.Enable_B {Use_ENB_Pin} \
   CONFIG.Memory_Type {Simple_Dual_Port_RAM} \
   CONFIG.Operating_Mode_A {NO_CHANGE} \
   CONFIG.Port_A_Write_Rate {50} \
   CONFIG.Port_B_Clock {100} \
   CONFIG.Port_B_Enable_Rate {100} \
   CONFIG.Port_B_Write_Rate {0} \
   CONFIG.Read_Width_A {12} \
   CONFIG.Read_Width_B {12} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Register_PortB_Output_of_Memory_Primitives {true} \
   CONFIG.Use_Byte_Write_Enable {false} \
   CONFIG.Use_RSTA_Pin {false} \
   CONFIG.Write_Depth_A {4096} \
   CONFIG.Write_Width_A {12} \
   CONFIG.Write_Width_B {12} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_1

  # Create instance: blk_mem_gen_2, and set properties
  set blk_mem_gen_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_2 ]
  set_property -dict [ list \
   CONFIG.Algorithm {Minimum_Area} \
   CONFIG.Byte_Size {9} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {false} \
   CONFIG.Enable_B {Use_ENB_Pin} \
   CONFIG.Memory_Type {Simple_Dual_Port_RAM} \
   CONFIG.Operating_Mode_A {NO_CHANGE} \
   CONFIG.Port_A_Write_Rate {50} \
   CONFIG.Port_B_Clock {100} \
   CONFIG.Port_B_Enable_Rate {100} \
   CONFIG.Port_B_Write_Rate {0} \
   CONFIG.Read_Width_A {12} \
   CONFIG.Read_Width_B {12} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Register_PortB_Output_of_Memory_Primitives {true} \
   CONFIG.Use_Byte_Write_Enable {false} \
   CONFIG.Use_RSTA_Pin {false} \
   CONFIG.Write_Depth_A {4096} \
   CONFIG.Write_Width_A {12} \
   CONFIG.Write_Width_B {12} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_2

  # Create instance: blk_mem_gen_3, and set properties
  set blk_mem_gen_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_3 ]
  set_property -dict [ list \
   CONFIG.Algorithm {Minimum_Area} \
   CONFIG.Byte_Size {9} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {false} \
   CONFIG.Enable_B {Use_ENB_Pin} \
   CONFIG.Memory_Type {Simple_Dual_Port_RAM} \
   CONFIG.Operating_Mode_A {NO_CHANGE} \
   CONFIG.Port_A_Write_Rate {50} \
   CONFIG.Port_B_Clock {100} \
   CONFIG.Port_B_Enable_Rate {100} \
   CONFIG.Port_B_Write_Rate {0} \
   CONFIG.Read_Width_A {12} \
   CONFIG.Read_Width_B {12} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Register_PortB_Output_of_Memory_Primitives {true} \
   CONFIG.Use_Byte_Write_Enable {false} \
   CONFIG.Use_RSTA_Pin {false} \
   CONFIG.Write_Depth_A {4096} \
   CONFIG.Write_Width_A {12} \
   CONFIG.Write_Width_B {12} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_3

  # Create instance: blk_mem_gen_4, and set properties
  set blk_mem_gen_4 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_4 ]
  set_property -dict [ list \
   CONFIG.Algorithm {Minimum_Area} \
   CONFIG.Byte_Size {9} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {false} \
   CONFIG.Enable_B {Use_ENB_Pin} \
   CONFIG.Memory_Type {Simple_Dual_Port_RAM} \
   CONFIG.Operating_Mode_A {NO_CHANGE} \
   CONFIG.Port_A_Write_Rate {50} \
   CONFIG.Port_B_Clock {100} \
   CONFIG.Port_B_Enable_Rate {100} \
   CONFIG.Port_B_Write_Rate {0} \
   CONFIG.Read_Width_A {12} \
   CONFIG.Read_Width_B {12} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Register_PortB_Output_of_Memory_Primitives {true} \
   CONFIG.Use_Byte_Write_Enable {false} \
   CONFIG.Use_RSTA_Pin {false} \
   CONFIG.Write_Depth_A {4096} \
   CONFIG.Write_Width_A {12} \
   CONFIG.Write_Width_B {12} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_4

  # Create instance: blk_mem_gen_5, and set properties
  set blk_mem_gen_5 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_5 ]
  set_property -dict [ list \
   CONFIG.Algorithm {Minimum_Area} \
   CONFIG.Byte_Size {9} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {false} \
   CONFIG.Enable_B {Use_ENB_Pin} \
   CONFIG.Memory_Type {Simple_Dual_Port_RAM} \
   CONFIG.Operating_Mode_A {NO_CHANGE} \
   CONFIG.Port_A_Write_Rate {50} \
   CONFIG.Port_B_Clock {100} \
   CONFIG.Port_B_Enable_Rate {100} \
   CONFIG.Port_B_Write_Rate {0} \
   CONFIG.Read_Width_A {12} \
   CONFIG.Read_Width_B {12} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Register_PortB_Output_of_Memory_Primitives {true} \
   CONFIG.Use_Byte_Write_Enable {false} \
   CONFIG.Use_RSTA_Pin {false} \
   CONFIG.Write_Depth_A {4096} \
   CONFIG.Write_Width_A {12} \
   CONFIG.Write_Width_B {12} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_5

  # Create instance: blk_mem_gen_6, and set properties
  set blk_mem_gen_6 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_6 ]
  set_property -dict [ list \
   CONFIG.Algorithm {Minimum_Area} \
   CONFIG.Byte_Size {9} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {false} \
   CONFIG.Enable_B {Use_ENB_Pin} \
   CONFIG.Memory_Type {Simple_Dual_Port_RAM} \
   CONFIG.Operating_Mode_A {NO_CHANGE} \
   CONFIG.Port_A_Write_Rate {50} \
   CONFIG.Port_B_Clock {100} \
   CONFIG.Port_B_Enable_Rate {100} \
   CONFIG.Port_B_Write_Rate {0} \
   CONFIG.Read_Width_A {12} \
   CONFIG.Read_Width_B {12} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Register_PortB_Output_of_Memory_Primitives {true} \
   CONFIG.Use_Byte_Write_Enable {false} \
   CONFIG.Use_RSTA_Pin {false} \
   CONFIG.Write_Depth_A {4096} \
   CONFIG.Write_Width_A {12} \
   CONFIG.Write_Width_B {12} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_6

  # Create instance: blk_mem_gen_7, and set properties
  set blk_mem_gen_7 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_7 ]
  set_property -dict [ list \
   CONFIG.Algorithm {Minimum_Area} \
   CONFIG.Byte_Size {9} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {false} \
   CONFIG.Enable_B {Use_ENB_Pin} \
   CONFIG.Memory_Type {Simple_Dual_Port_RAM} \
   CONFIG.Operating_Mode_A {NO_CHANGE} \
   CONFIG.Port_A_Write_Rate {50} \
   CONFIG.Port_B_Clock {100} \
   CONFIG.Port_B_Enable_Rate {100} \
   CONFIG.Port_B_Write_Rate {0} \
   CONFIG.Read_Width_A {12} \
   CONFIG.Read_Width_B {12} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Register_PortB_Output_of_Memory_Primitives {true} \
   CONFIG.Use_Byte_Write_Enable {false} \
   CONFIG.Use_RSTA_Pin {false} \
   CONFIG.Write_Depth_A {4096} \
   CONFIG.Write_Width_A {12} \
   CONFIG.Write_Width_B {12} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_7

  # Create port connections
  connect_bd_net -net aclk_1 [get_bd_pins aclk] [get_bd_pins blk_mem_gen_0/clka] [get_bd_pins blk_mem_gen_0/clkb] [get_bd_pins blk_mem_gen_1/clka] [get_bd_pins blk_mem_gen_1/clkb] [get_bd_pins blk_mem_gen_2/clka] [get_bd_pins blk_mem_gen_2/clkb] [get_bd_pins blk_mem_gen_3/clka] [get_bd_pins blk_mem_gen_3/clkb] [get_bd_pins blk_mem_gen_4/clka] [get_bd_pins blk_mem_gen_4/clkb] [get_bd_pins blk_mem_gen_5/clka] [get_bd_pins blk_mem_gen_5/clkb] [get_bd_pins blk_mem_gen_6/clka] [get_bd_pins blk_mem_gen_6/clkb] [get_bd_pins blk_mem_gen_7/clka] [get_bd_pins blk_mem_gen_7/clkb]
  connect_bd_net -net addra1_1 [get_bd_pins addra1] [get_bd_pins blk_mem_gen_1/addra]
  connect_bd_net -net addra2_1 [get_bd_pins addra2] [get_bd_pins blk_mem_gen_2/addra]
  connect_bd_net -net addra3_1 [get_bd_pins addra3] [get_bd_pins blk_mem_gen_3/addra]
  connect_bd_net -net addra4_1 [get_bd_pins addra4] [get_bd_pins blk_mem_gen_4/addra]
  connect_bd_net -net addra5_1 [get_bd_pins addra5] [get_bd_pins blk_mem_gen_5/addra]
  connect_bd_net -net addra6_1 [get_bd_pins addra6] [get_bd_pins blk_mem_gen_6/addra]
  connect_bd_net -net addra7_1 [get_bd_pins addra7] [get_bd_pins blk_mem_gen_7/addra]
  connect_bd_net -net addra_1 [get_bd_pins addra] [get_bd_pins blk_mem_gen_0/addra]
  connect_bd_net -net addrb1_1 [get_bd_pins addrb1] [get_bd_pins blk_mem_gen_1/addrb]
  connect_bd_net -net addrb2_1 [get_bd_pins addrb2] [get_bd_pins blk_mem_gen_2/addrb]
  connect_bd_net -net addrb3_1 [get_bd_pins addrb3] [get_bd_pins blk_mem_gen_3/addrb]
  connect_bd_net -net addrb4_1 [get_bd_pins addrb4] [get_bd_pins blk_mem_gen_4/addrb]
  connect_bd_net -net addrb5_1 [get_bd_pins addrb5] [get_bd_pins blk_mem_gen_5/addrb]
  connect_bd_net -net addrb6_1 [get_bd_pins addrb6] [get_bd_pins blk_mem_gen_6/addrb]
  connect_bd_net -net addrb7_1 [get_bd_pins addrb7] [get_bd_pins blk_mem_gen_7/addrb]
  connect_bd_net -net addrb_1 [get_bd_pins addrb] [get_bd_pins blk_mem_gen_0/addrb]
  connect_bd_net -net blk_mem_gen_0_doutb [get_bd_pins doutb] [get_bd_pins blk_mem_gen_0/doutb]
  connect_bd_net -net blk_mem_gen_1_doutb [get_bd_pins doutb1] [get_bd_pins blk_mem_gen_1/doutb]
  connect_bd_net -net blk_mem_gen_2_doutb [get_bd_pins doutb2] [get_bd_pins blk_mem_gen_2/doutb]
  connect_bd_net -net blk_mem_gen_3_doutb [get_bd_pins doutb3] [get_bd_pins blk_mem_gen_3/doutb]
  connect_bd_net -net blk_mem_gen_4_doutb [get_bd_pins doutb4] [get_bd_pins blk_mem_gen_4/doutb]
  connect_bd_net -net blk_mem_gen_5_doutb [get_bd_pins doutb5] [get_bd_pins blk_mem_gen_5/doutb]
  connect_bd_net -net blk_mem_gen_6_doutb [get_bd_pins doutb6] [get_bd_pins blk_mem_gen_6/doutb]
  connect_bd_net -net blk_mem_gen_7_doutb [get_bd_pins doutb7] [get_bd_pins blk_mem_gen_7/doutb]
  connect_bd_net -net dina1_1 [get_bd_pins dina1] [get_bd_pins blk_mem_gen_1/dina]
  connect_bd_net -net dina2_1 [get_bd_pins dina2] [get_bd_pins blk_mem_gen_2/dina]
  connect_bd_net -net dina3_1 [get_bd_pins dina3] [get_bd_pins blk_mem_gen_3/dina]
  connect_bd_net -net dina4_1 [get_bd_pins dina4] [get_bd_pins blk_mem_gen_4/dina]
  connect_bd_net -net dina5_1 [get_bd_pins dina5] [get_bd_pins blk_mem_gen_5/dina]
  connect_bd_net -net dina6_1 [get_bd_pins dina6] [get_bd_pins blk_mem_gen_6/dina]
  connect_bd_net -net dina7_1 [get_bd_pins dina7] [get_bd_pins blk_mem_gen_7/dina]
  connect_bd_net -net dina_1 [get_bd_pins dina] [get_bd_pins blk_mem_gen_0/dina]
  connect_bd_net -net enb1_1 [get_bd_pins enb1] [get_bd_pins blk_mem_gen_1/enb]
  connect_bd_net -net enb2_1 [get_bd_pins enb2] [get_bd_pins blk_mem_gen_2/enb]
  connect_bd_net -net enb3_1 [get_bd_pins enb3] [get_bd_pins blk_mem_gen_3/enb]
  connect_bd_net -net enb4_1 [get_bd_pins enb4] [get_bd_pins blk_mem_gen_4/enb]
  connect_bd_net -net enb5_1 [get_bd_pins enb5] [get_bd_pins blk_mem_gen_5/enb]
  connect_bd_net -net enb6_1 [get_bd_pins enb6] [get_bd_pins blk_mem_gen_6/enb]
  connect_bd_net -net enb7_1 [get_bd_pins enb7] [get_bd_pins blk_mem_gen_7/enb]
  connect_bd_net -net enb_1 [get_bd_pins enb] [get_bd_pins blk_mem_gen_0/enb]
  connect_bd_net -net wea1_1 [get_bd_pins wea1] [get_bd_pins blk_mem_gen_1/wea]
  connect_bd_net -net wea2_1 [get_bd_pins wea2] [get_bd_pins blk_mem_gen_2/wea]
  connect_bd_net -net wea3_1 [get_bd_pins wea3] [get_bd_pins blk_mem_gen_3/wea]
  connect_bd_net -net wea4_1 [get_bd_pins wea4] [get_bd_pins blk_mem_gen_4/wea]
  connect_bd_net -net wea5_1 [get_bd_pins wea5] [get_bd_pins blk_mem_gen_5/wea]
  connect_bd_net -net wea6_1 [get_bd_pins wea6] [get_bd_pins blk_mem_gen_6/wea]
  connect_bd_net -net wea7_1 [get_bd_pins wea7] [get_bd_pins blk_mem_gen_7/wea]
  connect_bd_net -net wea_1 [get_bd_pins wea] [get_bd_pins blk_mem_gen_0/wea]

  # Restore current instance
  current_bd_instance $oldCurInst
}
  
# Hierarchical cell: power_signal_circuits
proc create_hier_cell_power_signal_circuits { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_msg_id "BD_TCL-102" "ERROR" "create_hier_cell_power_signal_circuits() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI1
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI2

  # Create pins
  create_bd_pin -dir I BAT_LOW_N
  create_bd_pin -dir I DC_IN_OK_N
  create_bd_pin -dir O FPGA_LED_N
  create_bd_pin -dir O INHIB_12V
  create_bd_pin -dir O PWRHOLD
  create_bd_pin -dir O REF_EN_N
  create_bd_pin -dir I SWITCH_1
  create_bd_pin -dir I SWITCH_2
  create_bd_pin -dir I SWITCH_3
  create_bd_pin -dir I SWITCH_4
  create_bd_pin -dir I SWITCH_5
  create_bd_pin -dir I SWITCH_6
  create_bd_pin -dir I SW_ON
  create_bd_pin -dir I -type clk clock
  create_bd_pin -dir I -type rst s_axi_aresetn

  # Create instance: axi_gpio_0, and set properties
  set axi_gpio_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_gpio:2.0 axi_gpio_0 ]
  set_property -dict [ list \
   CONFIG.C_ALL_INPUTS {1} \
   CONFIG.C_GPIO_WIDTH {6} \
 ] $axi_gpio_0

  # Create instance: axi_gpio_1, and set properties
  set axi_gpio_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_gpio:2.0 axi_gpio_1 ]
  set_property -dict [ list \
   CONFIG.C_ALL_INPUTS {1} \
   CONFIG.C_GPIO_WIDTH {3} \
 ] $axi_gpio_1

  # Create instance: axi_gpio_2, and set properties
  set axi_gpio_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_gpio:2.0 axi_gpio_2 ]
  set_property -dict [ list \
   CONFIG.C_ALL_INPUTS {0} \
   CONFIG.C_ALL_OUTPUTS {1} \
   CONFIG.C_ALL_OUTPUTS_2 {0} \
   CONFIG.C_GPIO_WIDTH {4} \
   CONFIG.C_IS_DUAL {0} \
 ] $axi_gpio_2

  # Create instance: powerSigSplitter_0, and set properties
  set block_name powerSigSplitter
  set block_cell_name powerSigSplitter_0
  if { [catch {set powerSigSplitter_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $powerSigSplitter_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: switchDebounce_0, and set properties
  set block_name switchDebounce
  set block_cell_name switchDebounce_0
  if { [catch {set switchDebounce_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $switchDebounce_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create interface connections
  connect_bd_intf_net -intf_net microblaze_0_axi_periph_M01_AXI [get_bd_intf_pins S_AXI2] [get_bd_intf_pins axi_gpio_0/S_AXI]
  connect_bd_intf_net -intf_net microblaze_0_axi_periph_M06_AXI [get_bd_intf_pins S_AXI] [get_bd_intf_pins axi_gpio_1/S_AXI]
  connect_bd_intf_net -intf_net microblaze_0_axi_periph_M07_AXI [get_bd_intf_pins S_AXI1] [get_bd_intf_pins axi_gpio_2/S_AXI]

  # Create port connections
  connect_bd_net -net BAT_LOW_N_1 [get_bd_pins BAT_LOW_N] [get_bd_pins powerSigSplitter_0/bat_low]
  connect_bd_net -net DC_IN_OK_N_1 [get_bd_pins DC_IN_OK_N] [get_bd_pins powerSigSplitter_0/dc_in_ok]
  connect_bd_net -net SWITCH_1_1 [get_bd_pins SWITCH_1] [get_bd_pins switchDebounce_0/sw1_in]
  connect_bd_net -net SWITCH_2_1 [get_bd_pins SWITCH_2] [get_bd_pins switchDebounce_0/sw2_in]
  connect_bd_net -net SWITCH_3_1 [get_bd_pins SWITCH_3] [get_bd_pins switchDebounce_0/sw3_in]
  connect_bd_net -net SWITCH_4_1 [get_bd_pins SWITCH_4] [get_bd_pins switchDebounce_0/sw4_in]
  connect_bd_net -net SWITCH_5_1 [get_bd_pins SWITCH_5] [get_bd_pins switchDebounce_0/sw5_in]
  connect_bd_net -net SWITCH_6_1 [get_bd_pins SWITCH_6] [get_bd_pins switchDebounce_0/sw6_in]
  connect_bd_net -net SW_ON_1 [get_bd_pins SW_ON] [get_bd_pins powerSigSplitter_0/sw_on]
  connect_bd_net -net axi_gpio_2_gpio_io_o1 [get_bd_pins axi_gpio_2/gpio_io_o] [get_bd_pins powerSigSplitter_0/gpio_in]
  connect_bd_net -net microblaze_0_Clk [get_bd_pins clock] [get_bd_pins axi_gpio_0/s_axi_aclk] [get_bd_pins axi_gpio_1/s_axi_aclk] [get_bd_pins axi_gpio_2/s_axi_aclk] [get_bd_pins powerSigSplitter_0/clock] [get_bd_pins switchDebounce_0/clock]
  connect_bd_net -net powerSigSplitter_0_fpga_led [get_bd_pins FPGA_LED_N] [get_bd_pins powerSigSplitter_0/fpga_led]
  connect_bd_net -net powerSigSplitter_0_gpio_out [get_bd_pins axi_gpio_1/gpio_io_i] [get_bd_pins powerSigSplitter_0/gpio_out]
  connect_bd_net -net powerSigSplitter_0_inhib_12v [get_bd_pins INHIB_12V] [get_bd_pins powerSigSplitter_0/inhib_12v]
  connect_bd_net -net powerSigSplitter_0_pwrhold [get_bd_pins PWRHOLD] [get_bd_pins powerSigSplitter_0/pwrhold]
  connect_bd_net -net powerSigSplitter_0_ref_en_n [get_bd_pins REF_EN_N] [get_bd_pins powerSigSplitter_0/ref_en_n]
  connect_bd_net -net rst_clk_wiz_1_100M_peripheral_aresetn [get_bd_pins s_axi_aresetn] [get_bd_pins axi_gpio_0/s_axi_aresetn] [get_bd_pins axi_gpio_1/s_axi_aresetn] [get_bd_pins axi_gpio_2/s_axi_aresetn]
  connect_bd_net -net switchDebounce_0_GPIO_out [get_bd_pins axi_gpio_0/gpio_io_i] [get_bd_pins switchDebounce_0/SW_out]

  # Restore current instance
  current_bd_instance $oldCurInst
}
  
# Hierarchical cell: Display_GPIO
proc create_hier_cell_Display_GPIO { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_msg_id "BD_TCL-102" "ERROR" "create_hier_cell_Display_GPIO() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI1
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI2
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI3

  # Create pins
  create_bd_pin -dir O -from 7 -to 0 DISP_DB
  create_bd_pin -dir O -from 0 -to 0 DISP_E
  create_bd_pin -dir O -from 0 -to 0 DISP_RS
  create_bd_pin -dir O -from 0 -to 0 DISP_RW
  create_bd_pin -dir I -type clk s_axi_aclk
  create_bd_pin -dir I -type rst s_axi_aresetn

  # Create instance: axi_gpio_1, and set properties
  set axi_gpio_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_gpio:2.0 axi_gpio_1 ]
  set_property -dict [ list \
   CONFIG.C_ALL_INPUTS {0} \
   CONFIG.C_ALL_OUTPUTS {1} \
   CONFIG.C_GPIO_WIDTH {1} \
   CONFIG.C_INTERRUPT_PRESENT {0} \
 ] $axi_gpio_1

  # Create instance: axi_gpio_2, and set properties
  set axi_gpio_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_gpio:2.0 axi_gpio_2 ]
  set_property -dict [ list \
   CONFIG.C_ALL_INPUTS {0} \
   CONFIG.C_ALL_OUTPUTS {1} \
   CONFIG.C_GPIO_WIDTH {1} \
   CONFIG.C_INTERRUPT_PRESENT {0} \
 ] $axi_gpio_2

  # Create instance: axi_gpio_3, and set properties
  set axi_gpio_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_gpio:2.0 axi_gpio_3 ]
  set_property -dict [ list \
   CONFIG.C_ALL_INPUTS {0} \
   CONFIG.C_ALL_OUTPUTS {1} \
   CONFIG.C_GPIO_WIDTH {1} \
   CONFIG.C_INTERRUPT_PRESENT {0} \
 ] $axi_gpio_3

  # Create instance: axi_gpio_4, and set properties
  set axi_gpio_4 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_gpio:2.0 axi_gpio_4 ]
  set_property -dict [ list \
   CONFIG.C_ALL_INPUTS {0} \
   CONFIG.C_ALL_OUTPUTS {1} \
   CONFIG.C_GPIO_WIDTH {8} \
   CONFIG.C_INTERRUPT_PRESENT {0} \
 ] $axi_gpio_4

  # Create interface connections
  connect_bd_intf_net -intf_net microblaze_0_axi_periph_M02_AXI [get_bd_intf_pins S_AXI3] [get_bd_intf_pins axi_gpio_1/S_AXI]
  connect_bd_intf_net -intf_net microblaze_0_axi_periph_M03_AXI [get_bd_intf_pins S_AXI] [get_bd_intf_pins axi_gpio_2/S_AXI]
  connect_bd_intf_net -intf_net microblaze_0_axi_periph_M04_AXI [get_bd_intf_pins S_AXI1] [get_bd_intf_pins axi_gpio_3/S_AXI]
  connect_bd_intf_net -intf_net microblaze_0_axi_periph_M05_AXI [get_bd_intf_pins S_AXI2] [get_bd_intf_pins axi_gpio_4/S_AXI]

  # Create port connections
  connect_bd_net -net axi_gpio_1_gpio_io_o [get_bd_pins DISP_RW] [get_bd_pins axi_gpio_1/gpio_io_o]
  connect_bd_net -net axi_gpio_2_gpio_io_o [get_bd_pins DISP_E] [get_bd_pins axi_gpio_2/gpio_io_o]
  connect_bd_net -net axi_gpio_3_gpio_io_o [get_bd_pins DISP_RS] [get_bd_pins axi_gpio_3/gpio_io_o]
  connect_bd_net -net axi_gpio_4_gpio_io_o [get_bd_pins DISP_DB] [get_bd_pins axi_gpio_4/gpio_io_o]
  connect_bd_net -net microblaze_0_Clk [get_bd_pins s_axi_aclk] [get_bd_pins axi_gpio_1/s_axi_aclk] [get_bd_pins axi_gpio_2/s_axi_aclk] [get_bd_pins axi_gpio_3/s_axi_aclk] [get_bd_pins axi_gpio_4/s_axi_aclk]
  connect_bd_net -net rst_clk_wiz_1_100M_peripheral_aresetn [get_bd_pins s_axi_aresetn] [get_bd_pins axi_gpio_1/s_axi_aresetn] [get_bd_pins axi_gpio_2/s_axi_aresetn] [get_bd_pins axi_gpio_3/s_axi_aresetn] [get_bd_pins axi_gpio_4/s_axi_aresetn]

  # Restore current instance
  current_bd_instance $oldCurInst
}
  
# Hierarchical cell: microblaze_0_local_memory
proc create_hier_cell_microblaze_0_local_memory { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_msg_id "BD_TCL-102" "ERROR" "create_hier_cell_microblaze_0_local_memory() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode MirroredMaster -vlnv xilinx.com:interface:lmb_rtl:1.0 DLMB
  create_bd_intf_pin -mode MirroredMaster -vlnv xilinx.com:interface:lmb_rtl:1.0 ILMB
  create_bd_intf_pin -mode MirroredMaster -vlnv xilinx.com:interface:lmb_rtl:1.0 LMB_M

  # Create pins
  create_bd_pin -dir I -type clk LMB_Clk
  create_bd_pin -dir I -type rst SYS_Rst

  # Create instance: dlmb_bram_if_cntlr, and set properties
  set dlmb_bram_if_cntlr [ create_bd_cell -type ip -vlnv xilinx.com:ip:lmb_bram_if_cntlr:4.0 dlmb_bram_if_cntlr ]
  set_property -dict [ list \
   CONFIG.C_ECC {0} \
   CONFIG.C_NUM_LMB {2} \
 ] $dlmb_bram_if_cntlr

  # Create instance: dlmb_v10, and set properties
  set dlmb_v10 [ create_bd_cell -type ip -vlnv xilinx.com:ip:lmb_v10:3.0 dlmb_v10 ]

  # Create instance: ilmb_bram_if_cntlr, and set properties
  set ilmb_bram_if_cntlr [ create_bd_cell -type ip -vlnv xilinx.com:ip:lmb_bram_if_cntlr:4.0 ilmb_bram_if_cntlr ]
  set_property -dict [ list \
   CONFIG.C_ECC {0} \
 ] $ilmb_bram_if_cntlr

  # Create instance: ilmb_v10, and set properties
  set ilmb_v10 [ create_bd_cell -type ip -vlnv xilinx.com:ip:lmb_v10:3.0 ilmb_v10 ]

  # Create instance: lmb_bram, and set properties
  set lmb_bram [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 lmb_bram ]
  set_property -dict [ list \
   CONFIG.Enable_B {Use_ENB_Pin} \
   CONFIG.Memory_Type {True_Dual_Port_RAM} \
   CONFIG.Port_B_Clock {100} \
   CONFIG.Port_B_Enable_Rate {100} \
   CONFIG.Port_B_Write_Rate {50} \
   CONFIG.Use_RSTB_Pin {true} \
   CONFIG.use_bram_block {BRAM_Controller} \
 ] $lmb_bram

  # Create instance: lmb_v10, and set properties
  set lmb_v10 [ create_bd_cell -type ip -vlnv xilinx.com:ip:lmb_v10:3.0 lmb_v10 ]

  # Create interface connections
  connect_bd_intf_net -intf_net microblaze_0_dlmb [get_bd_intf_pins DLMB] [get_bd_intf_pins dlmb_v10/LMB_M]
  connect_bd_intf_net -intf_net microblaze_0_dlmb_bus [get_bd_intf_pins dlmb_bram_if_cntlr/SLMB] [get_bd_intf_pins dlmb_v10/LMB_Sl_0]
  connect_bd_intf_net -intf_net microblaze_0_dlmb_cntlr [get_bd_intf_pins dlmb_bram_if_cntlr/BRAM_PORT] [get_bd_intf_pins lmb_bram/BRAM_PORTA]
  connect_bd_intf_net -intf_net microblaze_0_ilmb [get_bd_intf_pins ILMB] [get_bd_intf_pins ilmb_v10/LMB_M]
  connect_bd_intf_net -intf_net microblaze_0_ilmb_bus [get_bd_intf_pins ilmb_bram_if_cntlr/SLMB] [get_bd_intf_pins ilmb_v10/LMB_Sl_0]
  connect_bd_intf_net -intf_net microblaze_0_ilmb_cntlr [get_bd_intf_pins ilmb_bram_if_cntlr/BRAM_PORT] [get_bd_intf_pins lmb_bram/BRAM_PORTB]
  connect_bd_intf_net -intf_net microblaze_0_lmb [get_bd_intf_pins LMB_M] [get_bd_intf_pins lmb_v10/LMB_M]
  connect_bd_intf_net -intf_net microblaze_0_lmb_bus [get_bd_intf_pins dlmb_bram_if_cntlr/SLMB1] [get_bd_intf_pins lmb_v10/LMB_Sl_0]

  # Create port connections
  connect_bd_net -net SYS_Rst_1 [get_bd_pins SYS_Rst] [get_bd_pins dlmb_bram_if_cntlr/LMB_Rst] [get_bd_pins dlmb_v10/SYS_Rst] [get_bd_pins ilmb_bram_if_cntlr/LMB_Rst] [get_bd_pins ilmb_v10/SYS_Rst] [get_bd_pins lmb_v10/SYS_Rst]
  connect_bd_net -net microblaze_0_Clk [get_bd_pins LMB_Clk] [get_bd_pins dlmb_bram_if_cntlr/LMB_Clk] [get_bd_pins dlmb_v10/LMB_Clk] [get_bd_pins ilmb_bram_if_cntlr/LMB_Clk] [get_bd_pins ilmb_v10/LMB_Clk] [get_bd_pins lmb_v10/LMB_Clk]

  # Restore current instance
  current_bd_instance $oldCurInst
}
  
# Hierarchical cell: wave_generation
proc create_hier_cell_wave_generation { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_msg_id "BD_TCL-102" "ERROR" "create_hier_cell_wave_generation() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI

  # Create pins
  create_bd_pin -dir O CH1_DAC_CS
  create_bd_pin -dir O CH1_DAC_DAT
  create_bd_pin -dir O CH1_DAC_SCLK
  create_bd_pin -dir O CH2_DAC_CS
  create_bd_pin -dir O CH2_DAC_DAT
  create_bd_pin -dir O CH2_DAC_SCLK
  create_bd_pin -dir O CH3_DAC_CS
  create_bd_pin -dir O CH3_DAC_DAT
  create_bd_pin -dir O CH3_DAC_SCLK
  create_bd_pin -dir O CH4_DAC_CS
  create_bd_pin -dir O CH4_DAC_DAT
  create_bd_pin -dir O CH4_DAC_SCLK
  create_bd_pin -dir O CH5_DAC_CS
  create_bd_pin -dir O CH5_DAC_DAT
  create_bd_pin -dir O CH5_DAC_SCLK
  create_bd_pin -dir O CH6_DAC_CS
  create_bd_pin -dir O CH6_DAC_DAT
  create_bd_pin -dir O CH6_DAC_SCLK
  create_bd_pin -dir O CH7_DAC_CS
  create_bd_pin -dir O CH7_DAC_DAT
  create_bd_pin -dir O CH7_DAC_SCLK
  create_bd_pin -dir O CH8_DAC_CS
  create_bd_pin -dir O CH8_DAC_DAT
  create_bd_pin -dir O CH8_DAC_SCLK
  create_bd_pin -dir I -type clk aclk
  create_bd_pin -dir I -type rst s_axi_aresetn

  # Create instance: AD5443_Proc_0, and set properties
  set block_name AD5443_Proc
  set block_cell_name AD5443_Proc_0
  if { [catch {set AD5443_Proc_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $AD5443_Proc_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: AD5443_Proc_1, and set properties
  set block_name AD5443_Proc
  set block_cell_name AD5443_Proc_1
  if { [catch {set AD5443_Proc_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $AD5443_Proc_1 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: AD5443_Proc_2, and set properties
  set block_name AD5443_Proc
  set block_cell_name AD5443_Proc_2
  if { [catch {set AD5443_Proc_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $AD5443_Proc_2 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: AD5443_Proc_3, and set properties
  set block_name AD5443_Proc
  set block_cell_name AD5443_Proc_3
  if { [catch {set AD5443_Proc_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $AD5443_Proc_3 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: AD5443_Proc_4, and set properties
  set block_name AD5443_Proc
  set block_cell_name AD5443_Proc_4
  if { [catch {set AD5443_Proc_4 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $AD5443_Proc_4 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: AD5443_Proc_5, and set properties
  set block_name AD5443_Proc
  set block_cell_name AD5443_Proc_5
  if { [catch {set AD5443_Proc_5 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $AD5443_Proc_5 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: AD5443_Proc_6, and set properties
  set block_name AD5443_Proc
  set block_cell_name AD5443_Proc_6
  if { [catch {set AD5443_Proc_6 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $AD5443_Proc_6 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: AD5443_Proc_7, and set properties
  set block_name AD5443_Proc
  set block_cell_name AD5443_Proc_7
  if { [catch {set AD5443_Proc_7 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $AD5443_Proc_7 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: ARB_PWM_Generator_0, and set properties
  set block_name ARB_PWM_Generator
  set block_cell_name ARB_PWM_Generator_0
  if { [catch {set ARB_PWM_Generator_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $ARB_PWM_Generator_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Arb_Mem
  create_hier_cell_Arb_Mem $hier_obj Arb_Mem

  # Create instance: DAC_PREP_PROC_0, and set properties
  set block_name DAC_PREP_PROC
  set block_cell_name DAC_PREP_PROC_0
  if { [catch {set DAC_PREP_PROC_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $DAC_PREP_PROC_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: DAC_WG_CFG_B_0, and set properties
  set block_name DAC_WG_CFG_B
  set block_cell_name DAC_WG_CFG_B_0
  if { [catch {set DAC_WG_CFG_B_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $DAC_WG_CFG_B_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: dds_compiler_0, and set properties
  set dds_compiler_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:dds_compiler:6.0 dds_compiler_0 ]
  set_property -dict [ list \
   CONFIG.Amplitude_Mode {Full_Range} \
   CONFIG.Channels {8} \
   CONFIG.DATA_Has_TLAST {Not_Required} \
   CONFIG.Frequency_Resolution {0.00003} \
   CONFIG.Has_ACLKEN {true} \
   CONFIG.Has_ARESETn {true} \
   CONFIG.Has_Phase_Out {false} \
   CONFIG.Has_TREADY {false} \
   CONFIG.Latency {8} \
   CONFIG.M_DATA_Has_TUSER {Chan_ID_Field} \
   CONFIG.M_PHASE_Has_TUSER {Not_Required} \
   CONFIG.Noise_Shaping {Auto} \
   CONFIG.Output_Frequency1 {0} \
   CONFIG.Output_Frequency2 {0} \
   CONFIG.Output_Frequency3 {0} \
   CONFIG.Output_Selection {Sine} \
   CONFIG.Output_Width {12} \
   CONFIG.PINC1 {0} \
   CONFIG.PINC2 {0} \
   CONFIG.PINC3 {0} \
   CONFIG.POFF1 {0} \
   CONFIG.POFF2 {0} \
   CONFIG.Phase_Increment {Programmable} \
   CONFIG.Phase_Offset_Angles1 {0} \
   CONFIG.Phase_Offset_Angles2 {0} \
   CONFIG.Phase_Width {39} \
   CONFIG.Phase_offset {Programmable} \
   CONFIG.Resync {false} \
   CONFIG.S_PHASE_Has_TUSER {Not_Required} \
   CONFIG.S_PHASE_TUSER_Width {1} \
   CONFIG.Spurious_Free_Dynamic_Range {72} \
 ] $dds_compiler_0

  # Create interface connections
  connect_bd_intf_net -intf_net DAC_WG_CFG_B_0_DDS_CONFIG [get_bd_intf_pins DAC_WG_CFG_B_0/DDS_CONFIG] [get_bd_intf_pins dds_compiler_0/S_AXIS_CONFIG]
  connect_bd_intf_net -intf_net S_AXI_1 [get_bd_intf_pins S_AXI] [get_bd_intf_pins DAC_WG_CFG_B_0/S_AXI]

  # Create port connections
  connect_bd_net -net AD5443_Proc_0_DAC_CS_N [get_bd_pins CH1_DAC_CS] [get_bd_pins AD5443_Proc_0/DAC_CS_N]
  connect_bd_net -net AD5443_Proc_0_DAC_DAT [get_bd_pins CH1_DAC_DAT] [get_bd_pins AD5443_Proc_0/DAC_DAT]
  connect_bd_net -net AD5443_Proc_0_DAC_SCLK [get_bd_pins CH1_DAC_SCLK] [get_bd_pins AD5443_Proc_0/DAC_SCLK]
  connect_bd_net -net AD5443_Proc_1_DAC_CS_N [get_bd_pins CH2_DAC_CS] [get_bd_pins AD5443_Proc_1/DAC_CS_N]
  connect_bd_net -net AD5443_Proc_1_DAC_DAT [get_bd_pins CH2_DAC_DAT] [get_bd_pins AD5443_Proc_1/DAC_DAT]
  connect_bd_net -net AD5443_Proc_1_DAC_SCLK [get_bd_pins CH2_DAC_SCLK] [get_bd_pins AD5443_Proc_1/DAC_SCLK]
  connect_bd_net -net AD5443_Proc_2_DAC_CS_N [get_bd_pins CH3_DAC_CS] [get_bd_pins AD5443_Proc_2/DAC_CS_N]
  connect_bd_net -net AD5443_Proc_2_DAC_DAT [get_bd_pins CH3_DAC_DAT] [get_bd_pins AD5443_Proc_2/DAC_DAT]
  connect_bd_net -net AD5443_Proc_2_DAC_SCLK [get_bd_pins CH3_DAC_SCLK] [get_bd_pins AD5443_Proc_2/DAC_SCLK]
  connect_bd_net -net AD5443_Proc_3_DAC_CS_N [get_bd_pins CH4_DAC_CS] [get_bd_pins AD5443_Proc_3/DAC_CS_N]
  connect_bd_net -net AD5443_Proc_3_DAC_DAT [get_bd_pins CH4_DAC_DAT] [get_bd_pins AD5443_Proc_3/DAC_DAT]
  connect_bd_net -net AD5443_Proc_3_DAC_SCLK [get_bd_pins CH4_DAC_SCLK] [get_bd_pins AD5443_Proc_3/DAC_SCLK]
  connect_bd_net -net AD5443_Proc_4_DAC_CS_N [get_bd_pins CH5_DAC_CS] [get_bd_pins AD5443_Proc_4/DAC_CS_N]
  connect_bd_net -net AD5443_Proc_4_DAC_DAT [get_bd_pins CH5_DAC_DAT] [get_bd_pins AD5443_Proc_4/DAC_DAT]
  connect_bd_net -net AD5443_Proc_4_DAC_SCLK [get_bd_pins CH5_DAC_SCLK] [get_bd_pins AD5443_Proc_4/DAC_SCLK]
  connect_bd_net -net AD5443_Proc_5_DAC_CS_N [get_bd_pins CH6_DAC_CS] [get_bd_pins AD5443_Proc_5/DAC_CS_N]
  connect_bd_net -net AD5443_Proc_5_DAC_DAT [get_bd_pins CH6_DAC_DAT] [get_bd_pins AD5443_Proc_5/DAC_DAT]
  connect_bd_net -net AD5443_Proc_5_DAC_SCLK [get_bd_pins CH6_DAC_SCLK] [get_bd_pins AD5443_Proc_5/DAC_SCLK]
  connect_bd_net -net AD5443_Proc_6_DAC_CS_N [get_bd_pins CH7_DAC_CS] [get_bd_pins AD5443_Proc_6/DAC_CS_N]
  connect_bd_net -net AD5443_Proc_6_DAC_DAT [get_bd_pins CH7_DAC_DAT] [get_bd_pins AD5443_Proc_6/DAC_DAT]
  connect_bd_net -net AD5443_Proc_6_DAC_SCLK [get_bd_pins CH7_DAC_SCLK] [get_bd_pins AD5443_Proc_6/DAC_SCLK]
  connect_bd_net -net AD5443_Proc_7_DAC_CS_N [get_bd_pins CH8_DAC_CS] [get_bd_pins AD5443_Proc_7/DAC_CS_N]
  connect_bd_net -net AD5443_Proc_7_DAC_DAT [get_bd_pins CH8_DAC_DAT] [get_bd_pins AD5443_Proc_7/DAC_DAT]
  connect_bd_net -net AD5443_Proc_7_DAC_SCLK [get_bd_pins CH8_DAC_SCLK] [get_bd_pins AD5443_Proc_7/DAC_SCLK]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_ADDR_0 [get_bd_pins ARB_PWM_Generator_0/ARB_RADDR_0] [get_bd_pins Arb_Mem/addrb] [get_bd_pins DAC_PREP_PROC_0/PWM_0]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_ADDR_1 [get_bd_pins ARB_PWM_Generator_0/ARB_RADDR_1] [get_bd_pins Arb_Mem/addrb1] [get_bd_pins DAC_PREP_PROC_0/PWM_1]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_ADDR_5 [get_bd_pins ARB_PWM_Generator_0/ARB_RADDR_5] [get_bd_pins Arb_Mem/addrb5] [get_bd_pins DAC_PREP_PROC_0/PWM_5]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_ADDR_6 [get_bd_pins ARB_PWM_Generator_0/ARB_RADDR_6] [get_bd_pins Arb_Mem/addrb6] [get_bd_pins DAC_PREP_PROC_0/PWM_6]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_REN_0 [get_bd_pins ARB_PWM_Generator_0/ARB_REN_0] [get_bd_pins Arb_Mem/enb]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_REN_1 [get_bd_pins ARB_PWM_Generator_0/ARB_REN_1] [get_bd_pins Arb_Mem/enb1]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_REN_2 [get_bd_pins ARB_PWM_Generator_0/ARB_REN_2] [get_bd_pins Arb_Mem/enb2]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_REN_3 [get_bd_pins ARB_PWM_Generator_0/ARB_REN_3] [get_bd_pins Arb_Mem/enb3]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_REN_4 [get_bd_pins ARB_PWM_Generator_0/ARB_REN_4] [get_bd_pins Arb_Mem/enb4]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_REN_5 [get_bd_pins ARB_PWM_Generator_0/ARB_REN_5] [get_bd_pins Arb_Mem/enb5]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_REN_6 [get_bd_pins ARB_PWM_Generator_0/ARB_REN_6] [get_bd_pins Arb_Mem/enb6]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_REN_7 [get_bd_pins ARB_PWM_Generator_0/ARB_REN_7] [get_bd_pins Arb_Mem/enb7]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WADDR_0 [get_bd_pins ARB_PWM_Generator_0/ARB_WADDR_0] [get_bd_pins Arb_Mem/addra]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WADDR_1 [get_bd_pins ARB_PWM_Generator_0/ARB_WADDR_1] [get_bd_pins Arb_Mem/addra1]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WADDR_2 [get_bd_pins ARB_PWM_Generator_0/ARB_WADDR_2] [get_bd_pins Arb_Mem/addra2]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WADDR_3 [get_bd_pins ARB_PWM_Generator_0/ARB_WADDR_3] [get_bd_pins Arb_Mem/addra3]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WADDR_4 [get_bd_pins ARB_PWM_Generator_0/ARB_WADDR_4] [get_bd_pins Arb_Mem/addra4]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WADDR_5 [get_bd_pins ARB_PWM_Generator_0/ARB_WADDR_5] [get_bd_pins Arb_Mem/addra5]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WADDR_6 [get_bd_pins ARB_PWM_Generator_0/ARB_WADDR_6] [get_bd_pins Arb_Mem/addra6]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WADDR_7 [get_bd_pins ARB_PWM_Generator_0/ARB_WADDR_7] [get_bd_pins Arb_Mem/addra7]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WDATA_0 [get_bd_pins ARB_PWM_Generator_0/ARB_WDATA_0] [get_bd_pins Arb_Mem/dina]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WDATA_1 [get_bd_pins ARB_PWM_Generator_0/ARB_WDATA_1] [get_bd_pins Arb_Mem/dina1]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WDATA_2 [get_bd_pins ARB_PWM_Generator_0/ARB_WDATA_2] [get_bd_pins Arb_Mem/dina2]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WDATA_3 [get_bd_pins ARB_PWM_Generator_0/ARB_WDATA_3] [get_bd_pins Arb_Mem/dina3]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WDATA_4 [get_bd_pins ARB_PWM_Generator_0/ARB_WDATA_4] [get_bd_pins Arb_Mem/dina4]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WDATA_5 [get_bd_pins ARB_PWM_Generator_0/ARB_WDATA_5] [get_bd_pins Arb_Mem/dina5]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WDATA_6 [get_bd_pins ARB_PWM_Generator_0/ARB_WDATA_6] [get_bd_pins Arb_Mem/dina6]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WDATA_7 [get_bd_pins ARB_PWM_Generator_0/ARB_WDATA_7] [get_bd_pins Arb_Mem/dina7]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WEN_0 [get_bd_pins ARB_PWM_Generator_0/ARB_WEN_0] [get_bd_pins Arb_Mem/wea]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WEN_1 [get_bd_pins ARB_PWM_Generator_0/ARB_WEN_1] [get_bd_pins Arb_Mem/wea1]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WEN_2 [get_bd_pins ARB_PWM_Generator_0/ARB_WEN_2] [get_bd_pins Arb_Mem/wea2]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WEN_3 [get_bd_pins ARB_PWM_Generator_0/ARB_WEN_3] [get_bd_pins Arb_Mem/wea3]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WEN_4 [get_bd_pins ARB_PWM_Generator_0/ARB_WEN_4] [get_bd_pins Arb_Mem/wea4]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WEN_5 [get_bd_pins ARB_PWM_Generator_0/ARB_WEN_5] [get_bd_pins Arb_Mem/wea5]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WEN_6 [get_bd_pins ARB_PWM_Generator_0/ARB_WEN_6] [get_bd_pins Arb_Mem/wea6]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WEN_7 [get_bd_pins ARB_PWM_Generator_0/ARB_WEN_7] [get_bd_pins Arb_Mem/wea7]
  connect_bd_net -net Arb_Mem_doutb [get_bd_pins Arb_Mem/doutb] [get_bd_pins DAC_PREP_PROC_0/ARB_0]
  connect_bd_net -net Arb_Mem_doutb1 [get_bd_pins Arb_Mem/doutb1] [get_bd_pins DAC_PREP_PROC_0/ARB_1]
  connect_bd_net -net Arb_Mem_doutb2 [get_bd_pins Arb_Mem/doutb2] [get_bd_pins DAC_PREP_PROC_0/ARB_2]
  connect_bd_net -net Arb_Mem_doutb3 [get_bd_pins Arb_Mem/doutb3] [get_bd_pins DAC_PREP_PROC_0/ARB_3]
  connect_bd_net -net Arb_Mem_doutb4 [get_bd_pins Arb_Mem/doutb4] [get_bd_pins DAC_PREP_PROC_0/ARB_4]
  connect_bd_net -net Arb_Mem_doutb5 [get_bd_pins Arb_Mem/doutb5] [get_bd_pins DAC_PREP_PROC_0/ARB_5]
  connect_bd_net -net Arb_Mem_doutb6 [get_bd_pins Arb_Mem/doutb6] [get_bd_pins DAC_PREP_PROC_0/ARB_6]
  connect_bd_net -net Arb_Mem_doutb7 [get_bd_pins Arb_Mem/doutb7] [get_bd_pins DAC_PREP_PROC_0/ARB_7]
  connect_bd_net -net DAC_PREP_PROC_0_CH_0_CS [get_bd_pins AD5443_Proc_0/DAC_ENABLE] [get_bd_pins DAC_PREP_PROC_0/CH0_EN]
  connect_bd_net -net DAC_PREP_PROC_0_CH_0_DOUT [get_bd_pins AD5443_Proc_0/NEW_DAC_VALUE] [get_bd_pins DAC_PREP_PROC_0/CH0_DOUT]
  connect_bd_net -net DAC_PREP_PROC_0_CH_1_CS [get_bd_pins AD5443_Proc_1/DAC_ENABLE] [get_bd_pins DAC_PREP_PROC_0/CH1_EN]
  connect_bd_net -net DAC_PREP_PROC_0_CH_1_DOUT [get_bd_pins AD5443_Proc_1/NEW_DAC_VALUE] [get_bd_pins DAC_PREP_PROC_0/CH1_DOUT]
  connect_bd_net -net DAC_PREP_PROC_0_CH_2_CS [get_bd_pins AD5443_Proc_2/DAC_ENABLE] [get_bd_pins DAC_PREP_PROC_0/CH2_EN]
  connect_bd_net -net DAC_PREP_PROC_0_CH_2_DOUT [get_bd_pins AD5443_Proc_2/NEW_DAC_VALUE] [get_bd_pins DAC_PREP_PROC_0/CH2_DOUT]
  connect_bd_net -net DAC_PREP_PROC_0_CH_3_CS [get_bd_pins AD5443_Proc_3/DAC_ENABLE] [get_bd_pins DAC_PREP_PROC_0/CH3_EN]
  connect_bd_net -net DAC_PREP_PROC_0_CH_3_DOUT [get_bd_pins AD5443_Proc_3/NEW_DAC_VALUE] [get_bd_pins DAC_PREP_PROC_0/CH3_DOUT]
  connect_bd_net -net DAC_PREP_PROC_0_CH_4_CS [get_bd_pins AD5443_Proc_4/DAC_ENABLE] [get_bd_pins DAC_PREP_PROC_0/CH4_EN]
  connect_bd_net -net DAC_PREP_PROC_0_CH_4_DOUT [get_bd_pins AD5443_Proc_4/NEW_DAC_VALUE] [get_bd_pins DAC_PREP_PROC_0/CH4_DOUT]
  connect_bd_net -net DAC_PREP_PROC_0_CH_5_CS [get_bd_pins AD5443_Proc_5/DAC_ENABLE] [get_bd_pins DAC_PREP_PROC_0/CH5_EN]
  connect_bd_net -net DAC_PREP_PROC_0_CH_5_DOUT [get_bd_pins AD5443_Proc_5/NEW_DAC_VALUE] [get_bd_pins DAC_PREP_PROC_0/CH5_DOUT]
  connect_bd_net -net DAC_PREP_PROC_0_CH_6_CS [get_bd_pins AD5443_Proc_6/DAC_ENABLE] [get_bd_pins DAC_PREP_PROC_0/CH6_EN]
  connect_bd_net -net DAC_PREP_PROC_0_CH_6_DOUT [get_bd_pins AD5443_Proc_6/NEW_DAC_VALUE] [get_bd_pins DAC_PREP_PROC_0/CH6_DOUT]
  connect_bd_net -net DAC_PREP_PROC_0_CH_7_CS [get_bd_pins AD5443_Proc_7/DAC_ENABLE] [get_bd_pins DAC_PREP_PROC_0/CH7_EN]
  connect_bd_net -net DAC_PREP_PROC_0_CH_7_DOUT [get_bd_pins AD5443_Proc_7/NEW_DAC_VALUE] [get_bd_pins DAC_PREP_PROC_0/CH7_DOUT]
  connect_bd_net -net DAC_WG_CFG_0_ARB_2_ADDR [get_bd_pins ARB_PWM_Generator_0/ARB_RADDR_2] [get_bd_pins Arb_Mem/addrb2] [get_bd_pins DAC_PREP_PROC_0/PWM_2]
  connect_bd_net -net DAC_WG_CFG_0_ARB_3_ADDR [get_bd_pins ARB_PWM_Generator_0/ARB_RADDR_3] [get_bd_pins Arb_Mem/addrb3] [get_bd_pins DAC_PREP_PROC_0/PWM_3]
  connect_bd_net -net DAC_WG_CFG_0_ARB_4_ADDR [get_bd_pins ARB_PWM_Generator_0/ARB_RADDR_4] [get_bd_pins Arb_Mem/addrb4] [get_bd_pins DAC_PREP_PROC_0/PWM_4]
  connect_bd_net -net DAC_WG_CFG_0_ARB_7_ADDR [get_bd_pins ARB_PWM_Generator_0/ARB_RADDR_7] [get_bd_pins Arb_Mem/addrb7] [get_bd_pins DAC_PREP_PROC_0/PWM_7]
  connect_bd_net -net DAC_WG_CFG_0_RESYNC [get_bd_pins ARB_PWM_Generator_0/M_RESYNC] [get_bd_pins DAC_PREP_PROC_0/M_RESYNC] [get_bd_pins DAC_WG_CFG_B_0/RESYNC]
  connect_bd_net -net DAC_WG_CFG_B_0_CHAN_MODE_VECTOR [get_bd_pins DAC_PREP_PROC_0/CHAN_MODE_VECTOR_IN] [get_bd_pins DAC_WG_CFG_B_0/CHAN_MODE_VECTOR]
  connect_bd_net -net DAC_WG_CFG_B_0_GAIN_VECTOR [get_bd_pins DAC_PREP_PROC_0/GAIN_VECTOR_IN] [get_bd_pins DAC_WG_CFG_B_0/GAIN_VECTOR]
  connect_bd_net -net DAC_WG_CFG_B_0_OFFSET_VECTOR [get_bd_pins DAC_PREP_PROC_0/OFFSET_VECTOR_IN] [get_bd_pins DAC_WG_CFG_B_0/OFFSET_VECTOR]
  connect_bd_net -net DAC_WG_CFG_B_0_PWM_ARB_0 [get_bd_pins ARB_PWM_Generator_0/ARB_PWM_IN_0] [get_bd_pins DAC_WG_CFG_B_0/PWM_ARB_0]
  connect_bd_net -net DAC_WG_CFG_B_0_PWM_ARB_1 [get_bd_pins ARB_PWM_Generator_0/ARB_PWM_IN_1] [get_bd_pins DAC_WG_CFG_B_0/PWM_ARB_1]
  connect_bd_net -net DAC_WG_CFG_B_0_PWM_ARB_2 [get_bd_pins ARB_PWM_Generator_0/ARB_PWM_IN_2] [get_bd_pins DAC_WG_CFG_B_0/PWM_ARB_2]
  connect_bd_net -net DAC_WG_CFG_B_0_PWM_ARB_3 [get_bd_pins ARB_PWM_Generator_0/ARB_PWM_IN_3] [get_bd_pins DAC_WG_CFG_B_0/PWM_ARB_3]
  connect_bd_net -net DAC_WG_CFG_B_0_PWM_ARB_4 [get_bd_pins ARB_PWM_Generator_0/ARB_PWM_IN_4] [get_bd_pins DAC_WG_CFG_B_0/PWM_ARB_4]
  connect_bd_net -net DAC_WG_CFG_B_0_PWM_ARB_5 [get_bd_pins ARB_PWM_Generator_0/ARB_PWM_IN_5] [get_bd_pins DAC_WG_CFG_B_0/PWM_ARB_5]
  connect_bd_net -net DAC_WG_CFG_B_0_PWM_ARB_6 [get_bd_pins ARB_PWM_Generator_0/ARB_PWM_IN_6] [get_bd_pins DAC_WG_CFG_B_0/PWM_ARB_6]
  connect_bd_net -net DAC_WG_CFG_B_0_PWM_ARB_7 [get_bd_pins ARB_PWM_Generator_0/ARB_PWM_IN_7] [get_bd_pins DAC_WG_CFG_B_0/PWM_ARB_7]
  connect_bd_net -net DAC_WG_CFG_B_0_PWM_ARB_TICK [get_bd_pins ARB_PWM_Generator_0/PWM_ARB_TICK_IN] [get_bd_pins DAC_WG_CFG_B_0/PWM_ARB_TICK]
  connect_bd_net -net DAC_WG_CFG_B_0_WRITE_ARB [get_bd_pins ARB_PWM_Generator_0/M_WRITE] [get_bd_pins DAC_WG_CFG_B_0/WRITE_ARB]
  connect_bd_net -net dds_compiler_0_m_axis_data_tdata [get_bd_pins DAC_PREP_PROC_0/DDS_TDATA] [get_bd_pins dds_compiler_0/m_axis_data_tdata]
  connect_bd_net -net dds_compiler_0_m_axis_data_tuser [get_bd_pins DAC_PREP_PROC_0/DDS_TUSER] [get_bd_pins dds_compiler_0/m_axis_data_tuser]
  connect_bd_net -net dds_compiler_0_m_axis_data_tvalid [get_bd_pins DAC_PREP_PROC_0/DDS_TVALID] [get_bd_pins dds_compiler_0/m_axis_data_tvalid]
  connect_bd_net -net microblaze_0_Clk [get_bd_pins aclk] [get_bd_pins AD5443_Proc_0/MAIN_CLOCK] [get_bd_pins AD5443_Proc_1/MAIN_CLOCK] [get_bd_pins AD5443_Proc_2/MAIN_CLOCK] [get_bd_pins AD5443_Proc_3/MAIN_CLOCK] [get_bd_pins AD5443_Proc_4/MAIN_CLOCK] [get_bd_pins AD5443_Proc_5/MAIN_CLOCK] [get_bd_pins AD5443_Proc_6/MAIN_CLOCK] [get_bd_pins AD5443_Proc_7/MAIN_CLOCK] [get_bd_pins ARB_PWM_Generator_0/S_AXI_ACLK] [get_bd_pins Arb_Mem/aclk] [get_bd_pins DAC_PREP_PROC_0/S_AXI_ACLK] [get_bd_pins DAC_WG_CFG_B_0/S_AXI_ACLK] [get_bd_pins dds_compiler_0/aclk]
  connect_bd_net -net s_axi_aresetn_1 [get_bd_pins s_axi_aresetn] [get_bd_pins DAC_WG_CFG_B_0/S_AXI_ARESETN] [get_bd_pins dds_compiler_0/aresetn]

  # Restore current instance
  current_bd_instance $oldCurInst
}
  
# Hierarchical cell: peripheral_signals
proc create_hier_cell_peripheral_signals { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_msg_id "BD_TCL-102" "ERROR" "create_hier_cell_peripheral_signals() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 AXI_LITE
  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:spi_rtl:1.0 Flash_Mem
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI1
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI2
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI3
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI4
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI5
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI6
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI7

  # Create pins
  create_bd_pin -dir I BAT_LOW_N
  create_bd_pin -dir I DC_IN_OK_N
  create_bd_pin -dir O -from 7 -to 0 DISP_DB
  create_bd_pin -dir O -from 0 -to 0 DISP_E
  create_bd_pin -dir O -from 0 -to 0 DISP_RS
  create_bd_pin -dir O -from 0 -to 0 DISP_RW
  create_bd_pin -dir O FPGA_LED_N
  create_bd_pin -dir O INHIB_12V
  create_bd_pin -dir O PWRHOLD
  create_bd_pin -dir O REF_EN_N
  create_bd_pin -dir I SWITCH_1
  create_bd_pin -dir I SWITCH_2
  create_bd_pin -dir I SWITCH_3
  create_bd_pin -dir I SWITCH_4
  create_bd_pin -dir I SWITCH_5
  create_bd_pin -dir I SWITCH_6
  create_bd_pin -dir I SW_ON
  create_bd_pin -dir O USB_UART_RXD
  create_bd_pin -dir I USB_UART_TXD
  create_bd_pin -dir I -type clk s_axi_aclk
  create_bd_pin -dir I -type rst s_axi_aresetn

  # Create instance: Display_GPIO
  create_hier_cell_Display_GPIO $hier_obj Display_GPIO

  # Create instance: axi_quad_spi_0, and set properties
  set axi_quad_spi_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_quad_spi:3.2 axi_quad_spi_0 ]
  set_property -dict [ list \
   CONFIG.C_FIFO_DEPTH {16} \
   CONFIG.C_SCK_RATIO {16} \
   CONFIG.C_SPI_MODE {0} \
   CONFIG.C_TYPE_OF_AXI4_INTERFACE {0} \
   CONFIG.C_USE_STARTUP {0} \
   CONFIG.C_USE_STARTUP_INT {0} \
   CONFIG.C_XIP_MODE {0} \
   CONFIG.FIFO_INCLUDED {1} \
   CONFIG.Master_mode {1} \
 ] $axi_quad_spi_0

  # Create instance: axi_uartlite_0, and set properties
  set axi_uartlite_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_uartlite:2.0 axi_uartlite_0 ]

  # Create instance: power_signal_circuits
  create_hier_cell_power_signal_circuits $hier_obj power_signal_circuits

  # Create interface connections
  connect_bd_intf_net -intf_net Conn1 [get_bd_intf_pins Flash_Mem] [get_bd_intf_pins axi_quad_spi_0/SPI_0]
  connect_bd_intf_net -intf_net Conn2 [get_bd_intf_pins AXI_LITE] [get_bd_intf_pins axi_quad_spi_0/AXI_LITE]
  connect_bd_intf_net -intf_net microblaze_0_axi_periph_M00_AXI [get_bd_intf_pins S_AXI] [get_bd_intf_pins axi_uartlite_0/S_AXI]
  connect_bd_intf_net -intf_net microblaze_0_axi_periph_M01_AXI [get_bd_intf_pins S_AXI3] [get_bd_intf_pins power_signal_circuits/S_AXI2]
  connect_bd_intf_net -intf_net microblaze_0_axi_periph_M02_AXI [get_bd_intf_pins S_AXI7] [get_bd_intf_pins Display_GPIO/S_AXI3]
  connect_bd_intf_net -intf_net microblaze_0_axi_periph_M03_AXI [get_bd_intf_pins S_AXI4] [get_bd_intf_pins Display_GPIO/S_AXI]
  connect_bd_intf_net -intf_net microblaze_0_axi_periph_M04_AXI [get_bd_intf_pins S_AXI5] [get_bd_intf_pins Display_GPIO/S_AXI1]
  connect_bd_intf_net -intf_net microblaze_0_axi_periph_M05_AXI [get_bd_intf_pins S_AXI6] [get_bd_intf_pins Display_GPIO/S_AXI2]
  connect_bd_intf_net -intf_net microblaze_0_axi_periph_M06_AXI [get_bd_intf_pins S_AXI1] [get_bd_intf_pins power_signal_circuits/S_AXI]
  connect_bd_intf_net -intf_net microblaze_0_axi_periph_M07_AXI [get_bd_intf_pins S_AXI2] [get_bd_intf_pins power_signal_circuits/S_AXI1]

  # Create port connections
  connect_bd_net -net BAT_LOW_N_1 [get_bd_pins BAT_LOW_N] [get_bd_pins power_signal_circuits/BAT_LOW_N]
  connect_bd_net -net DC_IN_OK_N_1 [get_bd_pins DC_IN_OK_N] [get_bd_pins power_signal_circuits/DC_IN_OK_N]
  connect_bd_net -net SWITCH_1_1 [get_bd_pins SWITCH_1] [get_bd_pins power_signal_circuits/SWITCH_1]
  connect_bd_net -net SWITCH_2_1 [get_bd_pins SWITCH_2] [get_bd_pins power_signal_circuits/SWITCH_2]
  connect_bd_net -net SWITCH_3_1 [get_bd_pins SWITCH_3] [get_bd_pins power_signal_circuits/SWITCH_3]
  connect_bd_net -net SWITCH_4_1 [get_bd_pins SWITCH_4] [get_bd_pins power_signal_circuits/SWITCH_4]
  connect_bd_net -net SWITCH_5_1 [get_bd_pins SWITCH_5] [get_bd_pins power_signal_circuits/SWITCH_5]
  connect_bd_net -net SWITCH_6_1 [get_bd_pins SWITCH_6] [get_bd_pins power_signal_circuits/SWITCH_6]
  connect_bd_net -net SW_ON_1 [get_bd_pins SW_ON] [get_bd_pins power_signal_circuits/SW_ON]
  connect_bd_net -net USB_UART_TXD_1 [get_bd_pins USB_UART_TXD] [get_bd_pins axi_uartlite_0/rx]
  connect_bd_net -net axi_gpio_1_gpio_io_o [get_bd_pins DISP_RW] [get_bd_pins Display_GPIO/DISP_RW]
  connect_bd_net -net axi_gpio_2_gpio_io_o [get_bd_pins DISP_E] [get_bd_pins Display_GPIO/DISP_E]
  connect_bd_net -net axi_gpio_3_gpio_io_o [get_bd_pins DISP_RS] [get_bd_pins Display_GPIO/DISP_RS]
  connect_bd_net -net axi_gpio_4_gpio_io_o [get_bd_pins DISP_DB] [get_bd_pins Display_GPIO/DISP_DB]
  connect_bd_net -net axi_uartlite_0_tx [get_bd_pins USB_UART_RXD] [get_bd_pins axi_uartlite_0/tx]
  connect_bd_net -net microblaze_0_Clk [get_bd_pins s_axi_aclk] [get_bd_pins Display_GPIO/s_axi_aclk] [get_bd_pins axi_quad_spi_0/ext_spi_clk] [get_bd_pins axi_quad_spi_0/s_axi_aclk] [get_bd_pins axi_uartlite_0/s_axi_aclk] [get_bd_pins power_signal_circuits/clock]
  connect_bd_net -net powerSigSplitter_0_fpga_led [get_bd_pins FPGA_LED_N] [get_bd_pins power_signal_circuits/FPGA_LED_N]
  connect_bd_net -net powerSigSplitter_0_inhib_12v [get_bd_pins INHIB_12V] [get_bd_pins power_signal_circuits/INHIB_12V]
  connect_bd_net -net powerSigSplitter_0_pwrhold [get_bd_pins PWRHOLD] [get_bd_pins power_signal_circuits/PWRHOLD]
  connect_bd_net -net powerSigSplitter_0_ref_en_n [get_bd_pins REF_EN_N] [get_bd_pins power_signal_circuits/REF_EN_N]
  connect_bd_net -net rst_clk_wiz_1_100M_peripheral_aresetn [get_bd_pins s_axi_aresetn] [get_bd_pins Display_GPIO/s_axi_aresetn] [get_bd_pins axi_quad_spi_0/s_axi_aresetn] [get_bd_pins axi_uartlite_0/s_axi_aresetn] [get_bd_pins power_signal_circuits/s_axi_aresetn]

  # Restore current instance
  current_bd_instance $oldCurInst
}
  
# Hierarchical cell: my_microblaze
proc create_hier_cell_my_microblaze { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_msg_id "BD_TCL-102" "ERROR" "create_hier_cell_my_microblaze() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 M00_AXI
  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 M01_AXI
  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 M02_AXI
  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 M03_AXI
  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 M04_AXI
  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 M05_AXI
  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 M06_AXI
  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 M07_AXI
  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 M09_AXI
  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 M10_AXI
  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 M11_AXI
  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 M12_AXI

  # Create pins
  create_bd_pin -dir I -type rst ARESETN
  create_bd_pin -dir I -type clk Clk
  create_bd_pin -dir O -type rst Debug_SYS_Rst
  create_bd_pin -dir I -type rst Reset
  create_bd_pin -dir I -type rst S00_ARESETN
  create_bd_pin -dir I -type rst SYS_Rst

  # Create instance: axi_intc_0, and set properties
  set axi_intc_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_intc:4.1 axi_intc_0 ]

  # Create instance: mdm_1, and set properties
  set mdm_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:mdm:3.2 mdm_1 ]
  set_property -dict [ list \
   CONFIG.C_DBG_MEM_ACCESS {1} \
 ] $mdm_1

  # Create instance: microblaze_0, and set properties
  set microblaze_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:microblaze:10.0 microblaze_0 ]
  set_property -dict [ list \
   CONFIG.C_ADDR_TAG_BITS {0} \
   CONFIG.C_AREA_OPTIMIZED {2} \
   CONFIG.C_DCACHE_ADDR_TAG {0} \
   CONFIG.C_DCACHE_USE_WRITEBACK {1} \
   CONFIG.C_DEBUG_ENABLED {1} \
   CONFIG.C_DIV_ZERO_EXCEPTION {1} \
   CONFIG.C_D_AXI {1} \
   CONFIG.C_D_LMB {1} \
   CONFIG.C_ENABLE_DISCRETE_PORTS {0} \
   CONFIG.C_ILL_OPCODE_EXCEPTION {1} \
   CONFIG.C_I_LMB {1} \
   CONFIG.C_MMU_DTLB_SIZE {2} \
   CONFIG.C_MMU_ITLB_SIZE {1} \
   CONFIG.C_MMU_ZONES {2} \
   CONFIG.C_M_AXI_D_BUS_EXCEPTION {1} \
   CONFIG.C_M_AXI_I_BUS_EXCEPTION {1} \
   CONFIG.C_NUMBER_OF_PC_BRK {2} \
   CONFIG.C_OPCODE_0x0_ILLEGAL {1} \
   CONFIG.C_UNALIGNED_EXCEPTIONS {1} \
   CONFIG.C_USE_BARREL {1} \
   CONFIG.C_USE_DCACHE {0} \
   CONFIG.C_USE_DIV {1} \
   CONFIG.C_USE_HW_MUL {1} \
   CONFIG.C_USE_ICACHE {0} \
   CONFIG.C_USE_MMU {0} \
   CONFIG.C_USE_MSR_INSTR {1} \
   CONFIG.C_USE_PCMP_INSTR {1} \
   CONFIG.G_TEMPLATE_LIST {9} \
   CONFIG.G_USE_EXCEPTIONS {1} \
 ] $microblaze_0

  # Create instance: microblaze_0_axi_periph, and set properties
  set microblaze_0_axi_periph [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect:2.1 microblaze_0_axi_periph ]
  set_property -dict [ list \
   CONFIG.NUM_MI {13} \
   CONFIG.NUM_SI {2} \
 ] $microblaze_0_axi_periph

  # Create instance: microblaze_0_local_memory
  create_hier_cell_microblaze_0_local_memory $hier_obj microblaze_0_local_memory

  # Create interface connections
  connect_bd_intf_net -intf_net Conn1 [get_bd_intf_pins M04_AXI] [get_bd_intf_pins microblaze_0_axi_periph/M04_AXI]
  connect_bd_intf_net -intf_net Conn2 [get_bd_intf_pins M03_AXI] [get_bd_intf_pins microblaze_0_axi_periph/M03_AXI]
  connect_bd_intf_net -intf_net Conn3 [get_bd_intf_pins M06_AXI] [get_bd_intf_pins microblaze_0_axi_periph/M06_AXI]
  connect_bd_intf_net -intf_net Conn4 [get_bd_intf_pins M07_AXI] [get_bd_intf_pins microblaze_0_axi_periph/M07_AXI]
  connect_bd_intf_net -intf_net Conn5 [get_bd_intf_pins M01_AXI] [get_bd_intf_pins microblaze_0_axi_periph/M01_AXI]
  connect_bd_intf_net -intf_net Conn6 [get_bd_intf_pins M00_AXI] [get_bd_intf_pins microblaze_0_axi_periph/M00_AXI]
  connect_bd_intf_net -intf_net Conn7 [get_bd_intf_pins M05_AXI] [get_bd_intf_pins microblaze_0_axi_periph/M05_AXI]
  connect_bd_intf_net -intf_net Conn8 [get_bd_intf_pins M02_AXI] [get_bd_intf_pins microblaze_0_axi_periph/M02_AXI]
  connect_bd_intf_net -intf_net Conn9 [get_bd_intf_pins M09_AXI] [get_bd_intf_pins microblaze_0_axi_periph/M09_AXI]
  connect_bd_intf_net -intf_net Conn10 [get_bd_intf_pins M12_AXI] [get_bd_intf_pins microblaze_0_axi_periph/M12_AXI]
  connect_bd_intf_net -intf_net axi_intc_0_interrupt [get_bd_intf_pins axi_intc_0/interrupt] [get_bd_intf_pins microblaze_0/INTERRUPT]
  connect_bd_intf_net -intf_net mdm_1_M_AXI [get_bd_intf_pins mdm_1/M_AXI] [get_bd_intf_pins microblaze_0_axi_periph/S01_AXI]
  connect_bd_intf_net -intf_net microblaze_0_M_AXI_DP [get_bd_intf_pins microblaze_0/M_AXI_DP] [get_bd_intf_pins microblaze_0_axi_periph/S00_AXI]
  connect_bd_intf_net -intf_net microblaze_0_axi_periph_M08_AXI [get_bd_intf_pins axi_intc_0/s_axi] [get_bd_intf_pins microblaze_0_axi_periph/M08_AXI]
  connect_bd_intf_net -intf_net microblaze_0_axi_periph_M10_AXI [get_bd_intf_pins M10_AXI] [get_bd_intf_pins microblaze_0_axi_periph/M10_AXI]
  connect_bd_intf_net -intf_net microblaze_0_axi_periph_M11_AXI [get_bd_intf_pins M11_AXI] [get_bd_intf_pins microblaze_0_axi_periph/M11_AXI]
  connect_bd_intf_net -intf_net microblaze_0_debug [get_bd_intf_pins mdm_1/MBDEBUG_0] [get_bd_intf_pins microblaze_0/DEBUG]
  connect_bd_intf_net -intf_net microblaze_0_dlmb_1 [get_bd_intf_pins microblaze_0/DLMB] [get_bd_intf_pins microblaze_0_local_memory/DLMB]
  connect_bd_intf_net -intf_net microblaze_0_ilmb_1 [get_bd_intf_pins microblaze_0/ILMB] [get_bd_intf_pins microblaze_0_local_memory/ILMB]
  connect_bd_intf_net -intf_net microblaze_0_lmb [get_bd_intf_pins mdm_1/LMB_0] [get_bd_intf_pins microblaze_0_local_memory/LMB_M]

  # Create port connections
  connect_bd_net -net ARESETN_1 [get_bd_pins ARESETN] [get_bd_pins microblaze_0_axi_periph/ARESETN]
  connect_bd_net -net mdm_1_debug_sys_rst [get_bd_pins Debug_SYS_Rst] [get_bd_pins mdm_1/Debug_SYS_Rst]
  connect_bd_net -net microblaze_0_Clk [get_bd_pins Clk] [get_bd_pins axi_intc_0/s_axi_aclk] [get_bd_pins mdm_1/M_AXI_ACLK] [get_bd_pins microblaze_0/Clk] [get_bd_pins microblaze_0_axi_periph/ACLK] [get_bd_pins microblaze_0_axi_periph/M00_ACLK] [get_bd_pins microblaze_0_axi_periph/M01_ACLK] [get_bd_pins microblaze_0_axi_periph/M02_ACLK] [get_bd_pins microblaze_0_axi_periph/M03_ACLK] [get_bd_pins microblaze_0_axi_periph/M04_ACLK] [get_bd_pins microblaze_0_axi_periph/M05_ACLK] [get_bd_pins microblaze_0_axi_periph/M06_ACLK] [get_bd_pins microblaze_0_axi_periph/M07_ACLK] [get_bd_pins microblaze_0_axi_periph/M08_ACLK] [get_bd_pins microblaze_0_axi_periph/M09_ACLK] [get_bd_pins microblaze_0_axi_periph/M10_ACLK] [get_bd_pins microblaze_0_axi_periph/M11_ACLK] [get_bd_pins microblaze_0_axi_periph/M12_ACLK] [get_bd_pins microblaze_0_axi_periph/S00_ACLK] [get_bd_pins microblaze_0_axi_periph/S01_ACLK] [get_bd_pins microblaze_0_local_memory/LMB_Clk]
  connect_bd_net -net rst_clk_wiz_1_100M_bus_struct_reset [get_bd_pins SYS_Rst] [get_bd_pins microblaze_0_local_memory/SYS_Rst]
  connect_bd_net -net rst_clk_wiz_1_100M_mb_reset [get_bd_pins Reset] [get_bd_pins microblaze_0/Reset]
  connect_bd_net -net rst_clk_wiz_1_100M_peripheral_aresetn [get_bd_pins S00_ARESETN] [get_bd_pins axi_intc_0/s_axi_aresetn] [get_bd_pins mdm_1/M_AXI_ARESETN] [get_bd_pins microblaze_0_axi_periph/M00_ARESETN] [get_bd_pins microblaze_0_axi_periph/M01_ARESETN] [get_bd_pins microblaze_0_axi_periph/M02_ARESETN] [get_bd_pins microblaze_0_axi_periph/M03_ARESETN] [get_bd_pins microblaze_0_axi_periph/M04_ARESETN] [get_bd_pins microblaze_0_axi_periph/M05_ARESETN] [get_bd_pins microblaze_0_axi_periph/M06_ARESETN] [get_bd_pins microblaze_0_axi_periph/M07_ARESETN] [get_bd_pins microblaze_0_axi_periph/M08_ARESETN] [get_bd_pins microblaze_0_axi_periph/M09_ARESETN] [get_bd_pins microblaze_0_axi_periph/M10_ARESETN] [get_bd_pins microblaze_0_axi_periph/M11_ARESETN] [get_bd_pins microblaze_0_axi_periph/M12_ARESETN] [get_bd_pins microblaze_0_axi_periph/S00_ARESETN] [get_bd_pins microblaze_0_axi_periph/S01_ARESETN]

  # Restore current instance
  current_bd_instance $oldCurInst
}
  
# Hierarchical cell: clocking_and_resets
proc create_hier_cell_clocking_and_resets { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_msg_id "BD_TCL-102" "ERROR" "create_hier_cell_clocking_and_resets() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -type rst MB_RESET_IN
  create_bd_pin -dir O -from 0 -to 0 -type rst bus_struct_reset
  create_bd_pin -dir O -type clk clk_out1
  create_bd_pin -dir O -from 0 -to 0 -type rst interconnect_aresetn
  create_bd_pin -dir I -type rst mb_debug_sys_rst
  create_bd_pin -dir O -type rst mb_reset
  create_bd_pin -dir O -from 0 -to 0 -type rst peripheral_aresetn
  create_bd_pin -dir I -type clk sys_clock

  # Create instance: clk_wiz_1, and set properties
  set clk_wiz_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:clk_wiz:5.4 clk_wiz_1 ]
  set_property -dict [ list \
   CONFIG.CLKIN1_JITTER_PS {200.0} \
   CONFIG.CLKOUT1_JITTER {162.035} \
   CONFIG.CLKOUT1_PHASE_ERROR {164.985} \
   CONFIG.MMCM_CLKFBOUT_MULT_F {20.000} \
   CONFIG.MMCM_CLKIN1_PERIOD {20.000} \
   CONFIG.MMCM_CLKIN2_PERIOD {10.0} \
   CONFIG.MMCM_CLKOUT0_DIVIDE_F {10.000} \
   CONFIG.MMCM_DIVCLK_DIVIDE {1} \
   CONFIG.PRIM_IN_FREQ {50} \
   CONFIG.RESET_PORT {resetn} \
   CONFIG.RESET_TYPE {ACTIVE_LOW} \
 ] $clk_wiz_1

  # Create instance: rst_clk_wiz_1_100M, and set properties
  set rst_clk_wiz_1_100M [ create_bd_cell -type ip -vlnv xilinx.com:ip:proc_sys_reset:5.0 rst_clk_wiz_1_100M ]
  set_property -dict [ list \
   CONFIG.RESET_BOARD_INTERFACE {Custom} \
   CONFIG.USE_BOARD_FLOW {true} \
 ] $rst_clk_wiz_1_100M

  # Create port connections
  connect_bd_net -net MB_RESET_IN_1 [get_bd_pins MB_RESET_IN] [get_bd_pins clk_wiz_1/resetn] [get_bd_pins rst_clk_wiz_1_100M/aux_reset_in] [get_bd_pins rst_clk_wiz_1_100M/ext_reset_in]
  connect_bd_net -net clk_wiz_1_locked [get_bd_pins clk_wiz_1/locked] [get_bd_pins rst_clk_wiz_1_100M/dcm_locked]
  connect_bd_net -net mdm_1_debug_sys_rst [get_bd_pins mb_debug_sys_rst] [get_bd_pins rst_clk_wiz_1_100M/mb_debug_sys_rst]
  connect_bd_net -net microblaze_0_Clk [get_bd_pins clk_out1] [get_bd_pins clk_wiz_1/clk_out1] [get_bd_pins rst_clk_wiz_1_100M/slowest_sync_clk]
  connect_bd_net -net rst_clk_wiz_1_100M_bus_struct_reset [get_bd_pins bus_struct_reset] [get_bd_pins rst_clk_wiz_1_100M/bus_struct_reset]
  connect_bd_net -net rst_clk_wiz_1_100M_interconnect_aresetn [get_bd_pins interconnect_aresetn] [get_bd_pins rst_clk_wiz_1_100M/interconnect_aresetn]
  connect_bd_net -net rst_clk_wiz_1_100M_mb_reset [get_bd_pins mb_reset] [get_bd_pins rst_clk_wiz_1_100M/mb_reset]
  connect_bd_net -net rst_clk_wiz_1_100M_peripheral_aresetn [get_bd_pins peripheral_aresetn] [get_bd_pins rst_clk_wiz_1_100M/peripheral_aresetn]
  connect_bd_net -net sys_clock_1 [get_bd_pins sys_clock] [get_bd_pins clk_wiz_1/clk_in1]

  # Restore current instance
  current_bd_instance $oldCurInst
}
  variable script_folder

  if { $parentCell eq "" } {
     set parentCell [get_bd_cells /]
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj


  # Create interface ports
  set Flash_Mem [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:spi_rtl:1.0 Flash_Mem ]

  # Create ports
  set AUX_A [ create_bd_port -dir O -type data AUX_A ]
  set AUX_B [ create_bd_port -dir O -type data AUX_B ]
  set BAT_LOW_N [ create_bd_port -dir I -type data BAT_LOW_N ]
  set CH1_DAC_CS [ create_bd_port -dir O CH1_DAC_CS ]
  set CH1_DAC_DAT [ create_bd_port -dir O -type data CH1_DAC_DAT ]
  set CH1_DAC_SCLK [ create_bd_port -dir O -type clk CH1_DAC_SCLK ]
  set CH2_DAC_CS [ create_bd_port -dir O CH2_DAC_CS ]
  set CH2_DAC_DAT [ create_bd_port -dir O -type data CH2_DAC_DAT ]
  set CH2_DAT_SCLK [ create_bd_port -dir O -type clk CH2_DAT_SCLK ]
  set CH3_DAC_CS [ create_bd_port -dir O CH3_DAC_CS ]
  set CH3_DAC_DAT [ create_bd_port -dir O -type data CH3_DAC_DAT ]
  set CH3_DAC_SCLK [ create_bd_port -dir O -type clk CH3_DAC_SCLK ]
  set CH4_DAC_CS [ create_bd_port -dir O CH4_DAC_CS ]
  set CH4_DAC_DAT [ create_bd_port -dir O -type data CH4_DAC_DAT ]
  set CH4_DAC_SCLK [ create_bd_port -dir O -type clk CH4_DAC_SCLK ]
  set CH5_DAC_CS [ create_bd_port -dir O CH5_DAC_CS ]
  set CH5_DAC_DAT [ create_bd_port -dir O -type data CH5_DAC_DAT ]
  set CH5_DAC_SCLK [ create_bd_port -dir O -type clk CH5_DAC_SCLK ]
  set CH6_DAC_CS [ create_bd_port -dir O CH6_DAC_CS ]
  set CH6_DAC_DAT [ create_bd_port -dir O -type data CH6_DAC_DAT ]
  set CH6_DAC_SCLK [ create_bd_port -dir O -type clk CH6_DAC_SCLK ]
  set CH7_DAC_CS [ create_bd_port -dir O CH7_DAC_CS ]
  set CH7_DAC_DAT [ create_bd_port -dir O -type data CH7_DAC_DAT ]
  set CH7_DAT_SCLK [ create_bd_port -dir O -type clk CH7_DAT_SCLK ]
  set CH8_DAC_CS [ create_bd_port -dir O CH8_DAC_CS ]
  set CH8_DAC_DAT [ create_bd_port -dir O -type data CH8_DAC_DAT ]
  set CH8_DAC_SCLK [ create_bd_port -dir O -type clk CH8_DAC_SCLK ]
  set CS2515 [ create_bd_port -dir O CS2515 ]
  set DC_IN_OK_N [ create_bd_port -dir I -type data DC_IN_OK_N ]
  set DIGITAL_OUTPUT_BUS [ create_bd_port -dir O -from 10 -to 0 -type data DIGITAL_OUTPUT_BUS ]
  set DISP_DB [ create_bd_port -dir O -from 7 -to 0 -type data DISP_DB ]
  set DISP_E [ create_bd_port -dir O -from 0 -to 0 -type data DISP_E ]
  set DISP_RS [ create_bd_port -dir O -from 0 -to 0 -type data DISP_RS ]
  set DISP_RW [ create_bd_port -dir O -from 0 -to 0 -type data DISP_RW ]
  set FPGA_LED_N [ create_bd_port -dir O -type data FPGA_LED_N ]
  set INHIB_12V [ create_bd_port -dir O -type data INHIB_12V ]
  set MB_RESET_IN [ create_bd_port -dir I -type rst MB_RESET_IN ]
  set OSC2515 [ create_bd_port -dir O -type data OSC2515 ]
  set PWRHOLD [ create_bd_port -dir O -type data PWRHOLD ]
  set REF_EN_N [ create_bd_port -dir O -type data REF_EN_N ]
  set RST2515 [ create_bd_port -dir O -type rst RST2515 ]
  set SCK2515 [ create_bd_port -dir O -type clk SCK2515 ]
  set SI2515 [ create_bd_port -dir O -type data SI2515 ]
  set SO2515 [ create_bd_port -dir I -type data SO2515 ]
  set SWITCH_1 [ create_bd_port -dir I -type data SWITCH_1 ]
  set SWITCH_2 [ create_bd_port -dir I -type data SWITCH_2 ]
  set SWITCH_3 [ create_bd_port -dir I -type data SWITCH_3 ]
  set SWITCH_4 [ create_bd_port -dir I -type data SWITCH_4 ]
  set SWITCH_5 [ create_bd_port -dir I -type data SWITCH_5 ]
  set SWITCH_6 [ create_bd_port -dir I -type data SWITCH_6 ]
  set SW_ON [ create_bd_port -dir I -type data SW_ON ]
  set USB_UART_RXD [ create_bd_port -dir O -type data USB_UART_RXD ]
  set USB_UART_TXD [ create_bd_port -dir I -type data USB_UART_TXD ]
  set sys_clock [ create_bd_port -dir I -type clk sys_clock ]
  set_property -dict [ list \
   CONFIG.FREQ_HZ {50000000} \
 ] $sys_clock

  # Create instance: clocking_and_resets
  create_hier_cell_clocking_and_resets [current_bd_instance .] clocking_and_resets

  # Create instance: my_microblaze
  create_hier_cell_my_microblaze [current_bd_instance .] my_microblaze

  # Create instance: peripheral_signals
  create_hier_cell_peripheral_signals [current_bd_instance .] peripheral_signals

  # Create instance: wave_generation
  create_hier_cell_wave_generation [current_bd_instance .] wave_generation

  # Create interface connections
  connect_bd_intf_net -intf_net S_AXI1_1 [get_bd_intf_pins my_microblaze/M06_AXI] [get_bd_intf_pins peripheral_signals/S_AXI1]
  connect_bd_intf_net -intf_net S_AXI2_1 [get_bd_intf_pins my_microblaze/M07_AXI] [get_bd_intf_pins peripheral_signals/S_AXI2]
  connect_bd_intf_net -intf_net S_AXI3_1 [get_bd_intf_pins my_microblaze/M01_AXI] [get_bd_intf_pins peripheral_signals/S_AXI3]
  connect_bd_intf_net -intf_net S_AXI4_1 [get_bd_intf_pins my_microblaze/M03_AXI] [get_bd_intf_pins peripheral_signals/S_AXI4]
  connect_bd_intf_net -intf_net S_AXI5_1 [get_bd_intf_pins my_microblaze/M04_AXI] [get_bd_intf_pins peripheral_signals/S_AXI5]
  connect_bd_intf_net -intf_net S_AXI6_1 [get_bd_intf_pins my_microblaze/M05_AXI] [get_bd_intf_pins peripheral_signals/S_AXI6]
  connect_bd_intf_net -intf_net S_AXI7_1 [get_bd_intf_pins my_microblaze/M02_AXI] [get_bd_intf_pins peripheral_signals/S_AXI7]
  connect_bd_intf_net -intf_net S_AXI_1 [get_bd_intf_pins my_microblaze/M00_AXI] [get_bd_intf_pins peripheral_signals/S_AXI]
  connect_bd_intf_net -intf_net microblaze_M11_AXI [get_bd_intf_pins my_microblaze/M11_AXI] [get_bd_intf_pins wave_generation/S_AXI]
  connect_bd_intf_net -intf_net my_microblaze_M12_AXI [get_bd_intf_pins my_microblaze/M12_AXI] [get_bd_intf_pins peripheral_signals/AXI_LITE]
  connect_bd_intf_net -intf_net peripheral_signals_Flash_Mem [get_bd_intf_ports Flash_Mem] [get_bd_intf_pins peripheral_signals/Flash_Mem]

  # Create port connections
  connect_bd_net -net BAT_LOW_N_1 [get_bd_ports BAT_LOW_N] [get_bd_pins peripheral_signals/BAT_LOW_N]
  connect_bd_net -net DC_IN_OK_N_1 [get_bd_ports DC_IN_OK_N] [get_bd_pins peripheral_signals/DC_IN_OK_N]
  connect_bd_net -net MB_RESET_IN_1 [get_bd_ports MB_RESET_IN] [get_bd_pins clocking_and_resets/MB_RESET_IN]
  connect_bd_net -net SWITCH_1_1 [get_bd_ports SWITCH_1] [get_bd_pins peripheral_signals/SWITCH_1]
  connect_bd_net -net SWITCH_2_1 [get_bd_ports SWITCH_2] [get_bd_pins peripheral_signals/SWITCH_2]
  connect_bd_net -net SWITCH_3_1 [get_bd_ports SWITCH_3] [get_bd_pins peripheral_signals/SWITCH_3]
  connect_bd_net -net SWITCH_4_1 [get_bd_ports SWITCH_4] [get_bd_pins peripheral_signals/SWITCH_4]
  connect_bd_net -net SWITCH_5_1 [get_bd_ports SWITCH_5] [get_bd_pins peripheral_signals/SWITCH_5]
  connect_bd_net -net SWITCH_6_1 [get_bd_ports SWITCH_6] [get_bd_pins peripheral_signals/SWITCH_6]
  connect_bd_net -net SW_ON_1 [get_bd_ports SW_ON] [get_bd_pins peripheral_signals/SW_ON]
  connect_bd_net -net USB_UART_TXD_1 [get_bd_ports USB_UART_TXD] [get_bd_pins peripheral_signals/USB_UART_TXD]
  connect_bd_net -net axi_gpio_1_gpio_io_o [get_bd_ports DISP_RW] [get_bd_pins peripheral_signals/DISP_RW]
  connect_bd_net -net axi_gpio_2_gpio_io_o [get_bd_ports DISP_E] [get_bd_pins peripheral_signals/DISP_E]
  connect_bd_net -net axi_gpio_3_gpio_io_o [get_bd_ports DISP_RS] [get_bd_pins peripheral_signals/DISP_RS]
  connect_bd_net -net axi_gpio_4_gpio_io_o [get_bd_ports DISP_DB] [get_bd_pins peripheral_signals/DISP_DB]
  connect_bd_net -net axi_uartlite_0_tx [get_bd_ports USB_UART_RXD] [get_bd_pins peripheral_signals/USB_UART_RXD]
  connect_bd_net -net clocking_and_resets_interconnect_aresetn [get_bd_pins clocking_and_resets/interconnect_aresetn] [get_bd_pins my_microblaze/ARESETN]
  connect_bd_net -net dac_0_dout0 [get_bd_ports CH1_DAC_DAT] [get_bd_pins wave_generation/CH1_DAC_DAT]
  connect_bd_net -net dac_0_dout1 [get_bd_ports CH2_DAC_DAT] [get_bd_pins wave_generation/CH2_DAC_DAT]
  connect_bd_net -net dac_0_dout2 [get_bd_ports CH3_DAC_DAT] [get_bd_pins wave_generation/CH3_DAC_DAT]
  connect_bd_net -net dac_0_dout3 [get_bd_ports CH4_DAC_DAT] [get_bd_pins wave_generation/CH4_DAC_DAT]
  connect_bd_net -net dac_0_dout4 [get_bd_ports CH5_DAC_DAT] [get_bd_pins wave_generation/CH5_DAC_DAT]
  connect_bd_net -net dac_0_dout5 [get_bd_ports CH6_DAC_DAT] [get_bd_pins wave_generation/CH6_DAC_DAT]
  connect_bd_net -net dac_0_dout6 [get_bd_ports CH7_DAC_DAT] [get_bd_pins wave_generation/CH7_DAC_DAT]
  connect_bd_net -net dac_0_dout7 [get_bd_ports CH8_DAC_DAT] [get_bd_pins wave_generation/CH8_DAC_DAT]
  connect_bd_net -net mdm_1_debug_sys_rst [get_bd_pins clocking_and_resets/mb_debug_sys_rst] [get_bd_pins my_microblaze/Debug_SYS_Rst]
  connect_bd_net -net microblaze_0_Clk [get_bd_pins clocking_and_resets/clk_out1] [get_bd_pins my_microblaze/Clk] [get_bd_pins peripheral_signals/s_axi_aclk] [get_bd_pins wave_generation/aclk]
  connect_bd_net -net powerSigSplitter_0_fpga_led [get_bd_ports FPGA_LED_N] [get_bd_pins peripheral_signals/FPGA_LED_N]
  connect_bd_net -net powerSigSplitter_0_inhib_12v [get_bd_ports INHIB_12V] [get_bd_pins peripheral_signals/INHIB_12V]
  connect_bd_net -net powerSigSplitter_0_pwrhold [get_bd_ports PWRHOLD] [get_bd_pins peripheral_signals/PWRHOLD]
  connect_bd_net -net powerSigSplitter_0_ref_en_n [get_bd_ports REF_EN_N] [get_bd_pins peripheral_signals/REF_EN_N]
  connect_bd_net -net rst_clk_wiz_1_100M_bus_struct_reset [get_bd_pins clocking_and_resets/bus_struct_reset] [get_bd_pins my_microblaze/SYS_Rst]
  connect_bd_net -net rst_clk_wiz_1_100M_mb_reset [get_bd_pins clocking_and_resets/mb_reset] [get_bd_pins my_microblaze/Reset]
  connect_bd_net -net rst_clk_wiz_1_100M_peripheral_aresetn [get_bd_pins clocking_and_resets/peripheral_aresetn] [get_bd_pins my_microblaze/S00_ARESETN] [get_bd_pins peripheral_signals/s_axi_aresetn] [get_bd_pins wave_generation/s_axi_aresetn]
  connect_bd_net -net sys_clock_1 [get_bd_ports sys_clock] [get_bd_pins clocking_and_resets/sys_clock]
  connect_bd_net -net wave_generation_CH1_DAC_CS [get_bd_ports CH1_DAC_CS] [get_bd_pins wave_generation/CH1_DAC_CS]
  connect_bd_net -net wave_generation_CH1_DAC_SCLK [get_bd_ports CH1_DAC_SCLK] [get_bd_pins wave_generation/CH1_DAC_SCLK]
  connect_bd_net -net wave_generation_CH2_DAC_CS [get_bd_ports CH2_DAC_CS] [get_bd_pins wave_generation/CH2_DAC_CS]
  connect_bd_net -net wave_generation_CH2_DAC_SCLK [get_bd_ports CH2_DAT_SCLK] [get_bd_pins wave_generation/CH2_DAC_SCLK]
  connect_bd_net -net wave_generation_CH3_DAC_CS [get_bd_ports CH3_DAC_CS] [get_bd_pins wave_generation/CH3_DAC_CS]
  connect_bd_net -net wave_generation_CH3_DAC_SCLK [get_bd_ports CH3_DAC_SCLK] [get_bd_pins wave_generation/CH3_DAC_SCLK]
  connect_bd_net -net wave_generation_CH4_DAC_CS [get_bd_ports CH4_DAC_CS] [get_bd_pins wave_generation/CH4_DAC_CS]
  connect_bd_net -net wave_generation_CH4_DAC_SCLK [get_bd_ports CH4_DAC_SCLK] [get_bd_pins wave_generation/CH4_DAC_SCLK]
  connect_bd_net -net wave_generation_CH5_DAC_CS [get_bd_ports CH5_DAC_CS] [get_bd_pins wave_generation/CH5_DAC_CS]
  connect_bd_net -net wave_generation_CH5_DAC_SCLK [get_bd_ports CH5_DAC_SCLK] [get_bd_pins wave_generation/CH5_DAC_SCLK]
  connect_bd_net -net wave_generation_CH6_DAC_CS [get_bd_ports CH6_DAC_CS] [get_bd_pins wave_generation/CH6_DAC_CS]
  connect_bd_net -net wave_generation_CH6_DAC_SCLK [get_bd_ports CH6_DAC_SCLK] [get_bd_pins wave_generation/CH6_DAC_SCLK]
  connect_bd_net -net wave_generation_CH7_DAC_CS [get_bd_ports CH7_DAC_CS] [get_bd_pins wave_generation/CH7_DAC_CS]
  connect_bd_net -net wave_generation_CH7_DAC_SCLK [get_bd_ports CH7_DAT_SCLK] [get_bd_pins wave_generation/CH7_DAC_SCLK]
  connect_bd_net -net wave_generation_CH8_DAC_CS [get_bd_ports CH8_DAC_CS] [get_bd_pins wave_generation/CH8_DAC_CS]
  connect_bd_net -net wave_generation_CH8_DAC_SCLK [get_bd_ports CH8_DAC_SCLK] [get_bd_pins wave_generation/CH8_DAC_SCLK]

  # Create address segments
  create_bd_addr_seg -range 0x00010000 -offset 0x44A00000 [get_bd_addr_spaces my_microblaze/mdm_1/Data] [get_bd_addr_segs wave_generation/DAC_WG_CFG_B_0/S_AXI/reg0] SEG_DAC_WG_CFG_B_0_reg0
  create_bd_addr_seg -range 0x00010000 -offset 0x40000000 [get_bd_addr_spaces my_microblaze/mdm_1/Data] [get_bd_addr_segs peripheral_signals/power_signal_circuits/axi_gpio_0/S_AXI/Reg] SEG_axi_gpio_0_Reg
  create_bd_addr_seg -range 0x00010000 -offset 0x40010000 [get_bd_addr_spaces my_microblaze/mdm_1/Data] [get_bd_addr_segs peripheral_signals/Display_GPIO/axi_gpio_1/S_AXI/Reg] SEG_axi_gpio_1_Reg
  create_bd_addr_seg -range 0x00010000 -offset 0x40050000 [get_bd_addr_spaces my_microblaze/mdm_1/Data] [get_bd_addr_segs peripheral_signals/power_signal_circuits/axi_gpio_1/S_AXI/Reg] SEG_axi_gpio_1_Reg1
  create_bd_addr_seg -range 0x00010000 -offset 0x40020000 [get_bd_addr_spaces my_microblaze/mdm_1/Data] [get_bd_addr_segs peripheral_signals/Display_GPIO/axi_gpio_2/S_AXI/Reg] SEG_axi_gpio_2_Reg
  create_bd_addr_seg -range 0x00010000 -offset 0x40060000 [get_bd_addr_spaces my_microblaze/mdm_1/Data] [get_bd_addr_segs peripheral_signals/power_signal_circuits/axi_gpio_2/S_AXI/Reg] SEG_axi_gpio_2_Reg1
  create_bd_addr_seg -range 0x00010000 -offset 0x40030000 [get_bd_addr_spaces my_microblaze/mdm_1/Data] [get_bd_addr_segs peripheral_signals/Display_GPIO/axi_gpio_3/S_AXI/Reg] SEG_axi_gpio_3_Reg
  create_bd_addr_seg -range 0x00010000 -offset 0x40040000 [get_bd_addr_spaces my_microblaze/mdm_1/Data] [get_bd_addr_segs peripheral_signals/Display_GPIO/axi_gpio_4/S_AXI/Reg] SEG_axi_gpio_4_Reg
  create_bd_addr_seg -range 0x00010000 -offset 0x41200000 [get_bd_addr_spaces my_microblaze/mdm_1/Data] [get_bd_addr_segs my_microblaze/axi_intc_0/S_AXI/Reg] SEG_axi_intc_0_Reg
  create_bd_addr_seg -range 0x00010000 -offset 0x44A10000 [get_bd_addr_spaces my_microblaze/mdm_1/Data] [get_bd_addr_segs peripheral_signals/axi_quad_spi_0/AXI_LITE/Reg] SEG_axi_quad_spi_0_Reg
  create_bd_addr_seg -range 0x00010000 -offset 0x40600000 [get_bd_addr_spaces my_microblaze/mdm_1/Data] [get_bd_addr_segs peripheral_signals/axi_uartlite_0/S_AXI/Reg] SEG_axi_uartlite_0_Reg
  create_bd_addr_seg -range 0x00020000 -offset 0x00000000 [get_bd_addr_spaces my_microblaze/mdm_1/Data] [get_bd_addr_segs my_microblaze/microblaze_0_local_memory/dlmb_bram_if_cntlr/SLMB1/Mem] SEG_dlmb_bram_if_cntlr_Mem
  create_bd_addr_seg -range 0x00010000 -offset 0x44A00000 [get_bd_addr_spaces my_microblaze/microblaze_0/Data] [get_bd_addr_segs wave_generation/DAC_WG_CFG_B_0/S_AXI/reg0] SEG_DAC_WG_CFG_B_0_reg0
  create_bd_addr_seg -range 0x00010000 -offset 0x40000000 [get_bd_addr_spaces my_microblaze/microblaze_0/Data] [get_bd_addr_segs peripheral_signals/power_signal_circuits/axi_gpio_0/S_AXI/Reg] SEG_axi_gpio_0_Reg
  create_bd_addr_seg -range 0x00010000 -offset 0x40010000 [get_bd_addr_spaces my_microblaze/microblaze_0/Data] [get_bd_addr_segs peripheral_signals/Display_GPIO/axi_gpio_1/S_AXI/Reg] SEG_axi_gpio_1_Reg
  create_bd_addr_seg -range 0x00010000 -offset 0x40050000 [get_bd_addr_spaces my_microblaze/microblaze_0/Data] [get_bd_addr_segs peripheral_signals/power_signal_circuits/axi_gpio_1/S_AXI/Reg] SEG_axi_gpio_1_Reg1
  create_bd_addr_seg -range 0x00010000 -offset 0x40020000 [get_bd_addr_spaces my_microblaze/microblaze_0/Data] [get_bd_addr_segs peripheral_signals/Display_GPIO/axi_gpio_2/S_AXI/Reg] SEG_axi_gpio_2_Reg
  create_bd_addr_seg -range 0x00010000 -offset 0x40060000 [get_bd_addr_spaces my_microblaze/microblaze_0/Data] [get_bd_addr_segs peripheral_signals/power_signal_circuits/axi_gpio_2/S_AXI/Reg] SEG_axi_gpio_2_Reg1
  create_bd_addr_seg -range 0x00010000 -offset 0x40030000 [get_bd_addr_spaces my_microblaze/microblaze_0/Data] [get_bd_addr_segs peripheral_signals/Display_GPIO/axi_gpio_3/S_AXI/Reg] SEG_axi_gpio_3_Reg
  create_bd_addr_seg -range 0x00010000 -offset 0x40040000 [get_bd_addr_spaces my_microblaze/microblaze_0/Data] [get_bd_addr_segs peripheral_signals/Display_GPIO/axi_gpio_4/S_AXI/Reg] SEG_axi_gpio_4_Reg
  create_bd_addr_seg -range 0x00010000 -offset 0x41200000 [get_bd_addr_spaces my_microblaze/microblaze_0/Data] [get_bd_addr_segs my_microblaze/axi_intc_0/S_AXI/Reg] SEG_axi_intc_0_Reg
  create_bd_addr_seg -range 0x00010000 -offset 0x44A10000 [get_bd_addr_spaces my_microblaze/microblaze_0/Data] [get_bd_addr_segs peripheral_signals/axi_quad_spi_0/AXI_LITE/Reg] SEG_axi_quad_spi_0_Reg
  create_bd_addr_seg -range 0x00010000 -offset 0x40600000 [get_bd_addr_spaces my_microblaze/microblaze_0/Data] [get_bd_addr_segs peripheral_signals/axi_uartlite_0/S_AXI/Reg] SEG_axi_uartlite_0_Reg
  create_bd_addr_seg -range 0x00020000 -offset 0x00000000 [get_bd_addr_spaces my_microblaze/microblaze_0/Data] [get_bd_addr_segs my_microblaze/microblaze_0_local_memory/dlmb_bram_if_cntlr/SLMB/Mem] SEG_dlmb_bram_if_cntlr_Mem
  create_bd_addr_seg -range 0x00010000 -offset 0x00000000 [get_bd_addr_spaces my_microblaze/microblaze_0/Instruction] [get_bd_addr_segs my_microblaze/microblaze_0_local_memory/ilmb_bram_if_cntlr/SLMB/Mem] SEG_ilmb_bram_if_cntlr_Mem


  # Restore current instance
  current_bd_instance $oldCurInst

  save_bd_design
  close_bd_design $design_name 
}
# End of cr_bd_TopLevel()
cr_bd_TopLevel ""
set_property EXCLUDE_DEBUG_LOGIC "0" [get_files TopLevel.bd ] 
set_property GENERATE_SYNTH_CHECKPOINT "1" [get_files TopLevel.bd ] 
set_property IS_ENABLED "1" [get_files TopLevel.bd ] 
set_property IS_GLOBAL_INCLUDE "0" [get_files TopLevel.bd ] 
set_property IS_LOCKED "0" [get_files TopLevel.bd ] 
set_property LIBRARY "xil_defaultlib" [get_files TopLevel.bd ] 
set_property PATH_MODE "RelativeFirst" [get_files TopLevel.bd ] 
set_property PFM_NAME "" [get_files TopLevel.bd ] 
set_property SYNTH_CHECKPOINT_MODE "Hierarchical" [get_files TopLevel.bd ] 
set_property USED_IN "synthesis implementation simulation" [get_files TopLevel.bd ] 
set_property USED_IN_IMPLEMENTATION "1" [get_files TopLevel.bd ] 
set_property USED_IN_SIMULATION "1" [get_files TopLevel.bd ] 
set_property USED_IN_SYNTHESIS "1" [get_files TopLevel.bd ] 

if { [get_files DAC.vhd] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Noah/Desktop/WG800_3_13_18/WG800_2_3_18.srcs/sources_1/new/DAC.vhd
}
if { [get_files DAC.vhd] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Noah/Desktop/WG800_3_13_18/WG800_2_3_18.srcs/sources_1/new/DAC.vhd
}
if { [get_files DAC.vhd] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Noah/Desktop/WG800_3_13_18/WG800_2_3_18.srcs/sources_1/new/DAC.vhd
}
if { [get_files DAC.vhd] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Noah/Desktop/WG800_3_13_18/WG800_2_3_18.srcs/sources_1/new/DAC.vhd
}
if { [get_files DAC.vhd] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Noah/Desktop/WG800_3_13_18/WG800_2_3_18.srcs/sources_1/new/DAC.vhd
}
if { [get_files DAC.vhd] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Noah/Desktop/WG800_3_13_18/WG800_2_3_18.srcs/sources_1/new/DAC.vhd
}
if { [get_files DAC.vhd] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Noah/Desktop/WG800_3_13_18/WG800_2_3_18.srcs/sources_1/new/DAC.vhd
}
if { [get_files DAC.vhd] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Noah/Desktop/WG800_3_13_18/WG800_2_3_18.srcs/sources_1/new/DAC.vhd
}
if { [get_files ARB_PWM_Generator.vhd] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Noah/Desktop/WG800_3_13_18/WG800_2_3_18.srcs/sources_1/new/ARB_PWM_Generator.vhd
}
if { [get_files DDS_config.vhd] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Noah/Desktop/WG800_3_13_18/WG800_2_3_18.srcs/sources_1/new/DDS_config.vhd
}
if { [get_files DAC_PREP_PROC.vhd] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Noah/Desktop/WG800_3_13_18/WG800_2_3_18.srcs/sources_1/new/DAC_PREP_PROC.vhd
}


# Proc to create BD Wave_Generation_Only
proc cr_bd_Wave_Generation_Only { parentCell } {
# The design that will be created by this Tcl proc contains the following 
# module references:
# AD5443_Proc, AD5443_Proc, AD5443_Proc, AD5443_Proc, AD5443_Proc, AD5443_Proc, AD5443_Proc, AD5443_Proc, ARB_PWM_Generator, DAC_PREP_PROC, DAC_WG_CFG_B



  # CHANGE DESIGN NAME HERE
  set design_name Wave_Generation_Only

  common::send_msg_id "BD_TCL-003" "INFO" "Currently there is no design <$design_name> in project, so creating one..."

  create_bd_design $design_name

  set bCheckIPsPassed 1
  ##################################################################
  # CHECK IPs
  ##################################################################
  set bCheckIPs 1
  if { $bCheckIPs == 1 } {
     set list_check_ips "\ 
  xilinx.com:ip:dds_compiler:6.0\
  xilinx.com:ip:blk_mem_gen:8.4\
  "

   set list_ips_missing ""
   common::send_msg_id "BD_TCL-006" "INFO" "Checking if the following IPs exist in the project's IP catalog: $list_check_ips ."

   foreach ip_vlnv $list_check_ips {
      set ip_obj [get_ipdefs -all $ip_vlnv]
      if { $ip_obj eq "" } {
         lappend list_ips_missing $ip_vlnv
      }
   }

   if { $list_ips_missing ne "" } {
      catch {common::send_msg_id "BD_TCL-115" "ERROR" "The following IPs are not found in the IP Catalog:\n  $list_ips_missing\n\nResolution: Please add the repository containing the IP(s) to the project." }
      set bCheckIPsPassed 0
   }

  }

  ##################################################################
  # CHECK Modules
  ##################################################################
  set bCheckModules 1
  if { $bCheckModules == 1 } {
     set list_check_mods "\ 
  AD5443_Proc\
  AD5443_Proc\
  AD5443_Proc\
  AD5443_Proc\
  AD5443_Proc\
  AD5443_Proc\
  AD5443_Proc\
  AD5443_Proc\
  ARB_PWM_Generator\
  DAC_PREP_PROC\
  DAC_WG_CFG_B\
  "

   set list_mods_missing ""
   common::send_msg_id "BD_TCL-006" "INFO" "Checking if the following modules exist in the project's sources: $list_check_mods ."

   foreach mod_vlnv $list_check_mods {
      if { [can_resolve_reference $mod_vlnv] == 0 } {
         lappend list_mods_missing $mod_vlnv
      }
   }

   if { $list_mods_missing ne "" } {
      catch {common::send_msg_id "BD_TCL-115" "ERROR" "The following module(s) are not found in the project: $list_mods_missing" }
      common::send_msg_id "BD_TCL-008" "INFO" "Please add source files for the missing module(s) above."
      set bCheckIPsPassed 0
   }
}

  if { $bCheckIPsPassed != 1 } {
    common::send_msg_id "BD_TCL-1003" "WARNING" "Will not continue with creation of design due to the error(s) above."
    return 3
  }

  
# Hierarchical cell: Arb_Mem
proc create_hier_cell_Arb_Mem { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_msg_id "BD_TCL-102" "ERROR" "create_hier_cell_Arb_Mem() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -type clk aclk
  create_bd_pin -dir I -from 11 -to 0 addra
  create_bd_pin -dir I -from 11 -to 0 addra1
  create_bd_pin -dir I -from 11 -to 0 addra2
  create_bd_pin -dir I -from 11 -to 0 addra3
  create_bd_pin -dir I -from 11 -to 0 addra4
  create_bd_pin -dir I -from 11 -to 0 addra5
  create_bd_pin -dir I -from 11 -to 0 addra6
  create_bd_pin -dir I -from 11 -to 0 addra7
  create_bd_pin -dir I -from 11 -to 0 addrb
  create_bd_pin -dir I -from 11 -to 0 addrb1
  create_bd_pin -dir I -from 11 -to 0 addrb2
  create_bd_pin -dir I -from 11 -to 0 addrb3
  create_bd_pin -dir I -from 11 -to 0 addrb4
  create_bd_pin -dir I -from 11 -to 0 addrb5
  create_bd_pin -dir I -from 11 -to 0 addrb6
  create_bd_pin -dir I -from 11 -to 0 addrb7
  create_bd_pin -dir I -from 11 -to 0 dina
  create_bd_pin -dir I -from 11 -to 0 dina1
  create_bd_pin -dir I -from 11 -to 0 dina2
  create_bd_pin -dir I -from 11 -to 0 dina3
  create_bd_pin -dir I -from 11 -to 0 dina4
  create_bd_pin -dir I -from 11 -to 0 dina5
  create_bd_pin -dir I -from 11 -to 0 dina6
  create_bd_pin -dir I -from 11 -to 0 dina7
  create_bd_pin -dir O -from 11 -to 0 doutb
  create_bd_pin -dir O -from 11 -to 0 doutb1
  create_bd_pin -dir O -from 11 -to 0 doutb2
  create_bd_pin -dir O -from 11 -to 0 doutb3
  create_bd_pin -dir O -from 11 -to 0 doutb4
  create_bd_pin -dir O -from 11 -to 0 doutb5
  create_bd_pin -dir O -from 11 -to 0 doutb6
  create_bd_pin -dir O -from 11 -to 0 doutb7
  create_bd_pin -dir I enb
  create_bd_pin -dir I enb1
  create_bd_pin -dir I enb2
  create_bd_pin -dir I enb3
  create_bd_pin -dir I enb4
  create_bd_pin -dir I enb5
  create_bd_pin -dir I enb6
  create_bd_pin -dir I enb7
  create_bd_pin -dir I -from 0 -to 0 wea
  create_bd_pin -dir I -from 0 -to 0 wea1
  create_bd_pin -dir I -from 0 -to 0 wea2
  create_bd_pin -dir I -from 0 -to 0 wea3
  create_bd_pin -dir I -from 0 -to 0 wea4
  create_bd_pin -dir I -from 0 -to 0 wea5
  create_bd_pin -dir I -from 0 -to 0 wea6
  create_bd_pin -dir I -from 0 -to 0 wea7

  # Create instance: blk_mem_gen_0, and set properties
  set blk_mem_gen_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_0 ]
  set_property -dict [ list \
   CONFIG.Algorithm {Minimum_Area} \
   CONFIG.Byte_Size {9} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {false} \
   CONFIG.Enable_B {Use_ENB_Pin} \
   CONFIG.Memory_Type {Simple_Dual_Port_RAM} \
   CONFIG.Operating_Mode_A {NO_CHANGE} \
   CONFIG.Port_A_Write_Rate {50} \
   CONFIG.Port_B_Clock {100} \
   CONFIG.Port_B_Enable_Rate {100} \
   CONFIG.Port_B_Write_Rate {0} \
   CONFIG.Read_Width_A {12} \
   CONFIG.Read_Width_B {12} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Register_PortB_Output_of_Memory_Primitives {true} \
   CONFIG.Use_Byte_Write_Enable {false} \
   CONFIG.Use_RSTA_Pin {false} \
   CONFIG.Write_Depth_A {4096} \
   CONFIG.Write_Width_A {12} \
   CONFIG.Write_Width_B {12} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_0

  # Create instance: blk_mem_gen_1, and set properties
  set blk_mem_gen_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_1 ]
  set_property -dict [ list \
   CONFIG.Algorithm {Minimum_Area} \
   CONFIG.Byte_Size {9} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {false} \
   CONFIG.Enable_B {Use_ENB_Pin} \
   CONFIG.Memory_Type {Simple_Dual_Port_RAM} \
   CONFIG.Operating_Mode_A {NO_CHANGE} \
   CONFIG.Port_A_Write_Rate {50} \
   CONFIG.Port_B_Clock {100} \
   CONFIG.Port_B_Enable_Rate {100} \
   CONFIG.Port_B_Write_Rate {0} \
   CONFIG.Read_Width_A {12} \
   CONFIG.Read_Width_B {12} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Register_PortB_Output_of_Memory_Primitives {true} \
   CONFIG.Use_Byte_Write_Enable {false} \
   CONFIG.Use_RSTA_Pin {false} \
   CONFIG.Write_Depth_A {4096} \
   CONFIG.Write_Width_A {12} \
   CONFIG.Write_Width_B {12} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_1

  # Create instance: blk_mem_gen_2, and set properties
  set blk_mem_gen_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_2 ]
  set_property -dict [ list \
   CONFIG.Algorithm {Minimum_Area} \
   CONFIG.Byte_Size {9} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {false} \
   CONFIG.Enable_B {Use_ENB_Pin} \
   CONFIG.Memory_Type {Simple_Dual_Port_RAM} \
   CONFIG.Operating_Mode_A {NO_CHANGE} \
   CONFIG.Port_A_Write_Rate {50} \
   CONFIG.Port_B_Clock {100} \
   CONFIG.Port_B_Enable_Rate {100} \
   CONFIG.Port_B_Write_Rate {0} \
   CONFIG.Read_Width_A {12} \
   CONFIG.Read_Width_B {12} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Register_PortB_Output_of_Memory_Primitives {true} \
   CONFIG.Use_Byte_Write_Enable {false} \
   CONFIG.Use_RSTA_Pin {false} \
   CONFIG.Write_Depth_A {4096} \
   CONFIG.Write_Width_A {12} \
   CONFIG.Write_Width_B {12} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_2

  # Create instance: blk_mem_gen_3, and set properties
  set blk_mem_gen_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_3 ]
  set_property -dict [ list \
   CONFIG.Algorithm {Minimum_Area} \
   CONFIG.Byte_Size {9} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {false} \
   CONFIG.Enable_B {Use_ENB_Pin} \
   CONFIG.Memory_Type {Simple_Dual_Port_RAM} \
   CONFIG.Operating_Mode_A {NO_CHANGE} \
   CONFIG.Port_A_Write_Rate {50} \
   CONFIG.Port_B_Clock {100} \
   CONFIG.Port_B_Enable_Rate {100} \
   CONFIG.Port_B_Write_Rate {0} \
   CONFIG.Read_Width_A {12} \
   CONFIG.Read_Width_B {12} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Register_PortB_Output_of_Memory_Primitives {true} \
   CONFIG.Use_Byte_Write_Enable {false} \
   CONFIG.Use_RSTA_Pin {false} \
   CONFIG.Write_Depth_A {4096} \
   CONFIG.Write_Width_A {12} \
   CONFIG.Write_Width_B {12} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_3

  # Create instance: blk_mem_gen_4, and set properties
  set blk_mem_gen_4 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_4 ]
  set_property -dict [ list \
   CONFIG.Algorithm {Minimum_Area} \
   CONFIG.Byte_Size {9} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {false} \
   CONFIG.Enable_B {Use_ENB_Pin} \
   CONFIG.Memory_Type {Simple_Dual_Port_RAM} \
   CONFIG.Operating_Mode_A {NO_CHANGE} \
   CONFIG.Port_A_Write_Rate {50} \
   CONFIG.Port_B_Clock {100} \
   CONFIG.Port_B_Enable_Rate {100} \
   CONFIG.Port_B_Write_Rate {0} \
   CONFIG.Read_Width_A {12} \
   CONFIG.Read_Width_B {12} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Register_PortB_Output_of_Memory_Primitives {true} \
   CONFIG.Use_Byte_Write_Enable {false} \
   CONFIG.Use_RSTA_Pin {false} \
   CONFIG.Write_Depth_A {4096} \
   CONFIG.Write_Width_A {12} \
   CONFIG.Write_Width_B {12} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_4

  # Create instance: blk_mem_gen_5, and set properties
  set blk_mem_gen_5 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_5 ]
  set_property -dict [ list \
   CONFIG.Algorithm {Minimum_Area} \
   CONFIG.Byte_Size {9} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {false} \
   CONFIG.Enable_B {Use_ENB_Pin} \
   CONFIG.Memory_Type {Simple_Dual_Port_RAM} \
   CONFIG.Operating_Mode_A {NO_CHANGE} \
   CONFIG.Port_A_Write_Rate {50} \
   CONFIG.Port_B_Clock {100} \
   CONFIG.Port_B_Enable_Rate {100} \
   CONFIG.Port_B_Write_Rate {0} \
   CONFIG.Read_Width_A {12} \
   CONFIG.Read_Width_B {12} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Register_PortB_Output_of_Memory_Primitives {true} \
   CONFIG.Use_Byte_Write_Enable {false} \
   CONFIG.Use_RSTA_Pin {false} \
   CONFIG.Write_Depth_A {4096} \
   CONFIG.Write_Width_A {12} \
   CONFIG.Write_Width_B {12} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_5

  # Create instance: blk_mem_gen_6, and set properties
  set blk_mem_gen_6 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_6 ]
  set_property -dict [ list \
   CONFIG.Algorithm {Minimum_Area} \
   CONFIG.Byte_Size {9} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {false} \
   CONFIG.Enable_B {Use_ENB_Pin} \
   CONFIG.Memory_Type {Simple_Dual_Port_RAM} \
   CONFIG.Operating_Mode_A {NO_CHANGE} \
   CONFIG.Port_A_Write_Rate {50} \
   CONFIG.Port_B_Clock {100} \
   CONFIG.Port_B_Enable_Rate {100} \
   CONFIG.Port_B_Write_Rate {0} \
   CONFIG.Read_Width_A {12} \
   CONFIG.Read_Width_B {12} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Register_PortB_Output_of_Memory_Primitives {true} \
   CONFIG.Use_Byte_Write_Enable {false} \
   CONFIG.Use_RSTA_Pin {false} \
   CONFIG.Write_Depth_A {4096} \
   CONFIG.Write_Width_A {12} \
   CONFIG.Write_Width_B {12} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_6

  # Create instance: blk_mem_gen_7, and set properties
  set blk_mem_gen_7 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 blk_mem_gen_7 ]
  set_property -dict [ list \
   CONFIG.Algorithm {Minimum_Area} \
   CONFIG.Byte_Size {9} \
   CONFIG.EN_SAFETY_CKT {false} \
   CONFIG.Enable_32bit_Address {false} \
   CONFIG.Enable_B {Use_ENB_Pin} \
   CONFIG.Memory_Type {Simple_Dual_Port_RAM} \
   CONFIG.Operating_Mode_A {NO_CHANGE} \
   CONFIG.Port_A_Write_Rate {50} \
   CONFIG.Port_B_Clock {100} \
   CONFIG.Port_B_Enable_Rate {100} \
   CONFIG.Port_B_Write_Rate {0} \
   CONFIG.Read_Width_A {12} \
   CONFIG.Read_Width_B {12} \
   CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
   CONFIG.Register_PortB_Output_of_Memory_Primitives {true} \
   CONFIG.Use_Byte_Write_Enable {false} \
   CONFIG.Use_RSTA_Pin {false} \
   CONFIG.Write_Depth_A {4096} \
   CONFIG.Write_Width_A {12} \
   CONFIG.Write_Width_B {12} \
   CONFIG.use_bram_block {Stand_Alone} \
 ] $blk_mem_gen_7

  # Create port connections
  connect_bd_net -net aclk_1 [get_bd_pins aclk] [get_bd_pins blk_mem_gen_0/clka] [get_bd_pins blk_mem_gen_0/clkb] [get_bd_pins blk_mem_gen_1/clka] [get_bd_pins blk_mem_gen_1/clkb] [get_bd_pins blk_mem_gen_2/clka] [get_bd_pins blk_mem_gen_2/clkb] [get_bd_pins blk_mem_gen_3/clka] [get_bd_pins blk_mem_gen_3/clkb] [get_bd_pins blk_mem_gen_4/clka] [get_bd_pins blk_mem_gen_4/clkb] [get_bd_pins blk_mem_gen_5/clka] [get_bd_pins blk_mem_gen_5/clkb] [get_bd_pins blk_mem_gen_6/clka] [get_bd_pins blk_mem_gen_6/clkb] [get_bd_pins blk_mem_gen_7/clka] [get_bd_pins blk_mem_gen_7/clkb]
  connect_bd_net -net addra1_1 [get_bd_pins addra1] [get_bd_pins blk_mem_gen_1/addra]
  connect_bd_net -net addra2_1 [get_bd_pins addra2] [get_bd_pins blk_mem_gen_2/addra]
  connect_bd_net -net addra3_1 [get_bd_pins addra3] [get_bd_pins blk_mem_gen_3/addra]
  connect_bd_net -net addra4_1 [get_bd_pins addra4] [get_bd_pins blk_mem_gen_4/addra]
  connect_bd_net -net addra5_1 [get_bd_pins addra5] [get_bd_pins blk_mem_gen_5/addra]
  connect_bd_net -net addra6_1 [get_bd_pins addra6] [get_bd_pins blk_mem_gen_6/addra]
  connect_bd_net -net addra7_1 [get_bd_pins addra7] [get_bd_pins blk_mem_gen_7/addra]
  connect_bd_net -net addra_1 [get_bd_pins addra] [get_bd_pins blk_mem_gen_0/addra]
  connect_bd_net -net addrb1_1 [get_bd_pins addrb1] [get_bd_pins blk_mem_gen_1/addrb]
  connect_bd_net -net addrb2_1 [get_bd_pins addrb2] [get_bd_pins blk_mem_gen_2/addrb]
  connect_bd_net -net addrb3_1 [get_bd_pins addrb3] [get_bd_pins blk_mem_gen_3/addrb]
  connect_bd_net -net addrb4_1 [get_bd_pins addrb4] [get_bd_pins blk_mem_gen_4/addrb]
  connect_bd_net -net addrb5_1 [get_bd_pins addrb5] [get_bd_pins blk_mem_gen_5/addrb]
  connect_bd_net -net addrb6_1 [get_bd_pins addrb6] [get_bd_pins blk_mem_gen_6/addrb]
  connect_bd_net -net addrb7_1 [get_bd_pins addrb7] [get_bd_pins blk_mem_gen_7/addrb]
  connect_bd_net -net addrb_1 [get_bd_pins addrb] [get_bd_pins blk_mem_gen_0/addrb]
  connect_bd_net -net blk_mem_gen_0_doutb [get_bd_pins doutb] [get_bd_pins blk_mem_gen_0/doutb]
  connect_bd_net -net blk_mem_gen_1_doutb [get_bd_pins doutb1] [get_bd_pins blk_mem_gen_1/doutb]
  connect_bd_net -net blk_mem_gen_2_doutb [get_bd_pins doutb2] [get_bd_pins blk_mem_gen_2/doutb]
  connect_bd_net -net blk_mem_gen_3_doutb [get_bd_pins doutb3] [get_bd_pins blk_mem_gen_3/doutb]
  connect_bd_net -net blk_mem_gen_4_doutb [get_bd_pins doutb4] [get_bd_pins blk_mem_gen_4/doutb]
  connect_bd_net -net blk_mem_gen_5_doutb [get_bd_pins doutb5] [get_bd_pins blk_mem_gen_5/doutb]
  connect_bd_net -net blk_mem_gen_6_doutb [get_bd_pins doutb6] [get_bd_pins blk_mem_gen_6/doutb]
  connect_bd_net -net blk_mem_gen_7_doutb [get_bd_pins doutb7] [get_bd_pins blk_mem_gen_7/doutb]
  connect_bd_net -net dina1_1 [get_bd_pins dina1] [get_bd_pins blk_mem_gen_1/dina]
  connect_bd_net -net dina2_1 [get_bd_pins dina2] [get_bd_pins blk_mem_gen_2/dina]
  connect_bd_net -net dina3_1 [get_bd_pins dina3] [get_bd_pins blk_mem_gen_3/dina]
  connect_bd_net -net dina4_1 [get_bd_pins dina4] [get_bd_pins blk_mem_gen_4/dina]
  connect_bd_net -net dina5_1 [get_bd_pins dina5] [get_bd_pins blk_mem_gen_5/dina]
  connect_bd_net -net dina6_1 [get_bd_pins dina6] [get_bd_pins blk_mem_gen_6/dina]
  connect_bd_net -net dina7_1 [get_bd_pins dina7] [get_bd_pins blk_mem_gen_7/dina]
  connect_bd_net -net dina_1 [get_bd_pins dina] [get_bd_pins blk_mem_gen_0/dina]
  connect_bd_net -net enb1_1 [get_bd_pins enb1] [get_bd_pins blk_mem_gen_1/enb]
  connect_bd_net -net enb2_1 [get_bd_pins enb2] [get_bd_pins blk_mem_gen_2/enb]
  connect_bd_net -net enb3_1 [get_bd_pins enb3] [get_bd_pins blk_mem_gen_3/enb]
  connect_bd_net -net enb4_1 [get_bd_pins enb4] [get_bd_pins blk_mem_gen_4/enb]
  connect_bd_net -net enb5_1 [get_bd_pins enb5] [get_bd_pins blk_mem_gen_5/enb]
  connect_bd_net -net enb6_1 [get_bd_pins enb6] [get_bd_pins blk_mem_gen_6/enb]
  connect_bd_net -net enb7_1 [get_bd_pins enb7] [get_bd_pins blk_mem_gen_7/enb]
  connect_bd_net -net enb_1 [get_bd_pins enb] [get_bd_pins blk_mem_gen_0/enb]
  connect_bd_net -net wea1_1 [get_bd_pins wea1] [get_bd_pins blk_mem_gen_1/wea]
  connect_bd_net -net wea2_1 [get_bd_pins wea2] [get_bd_pins blk_mem_gen_2/wea]
  connect_bd_net -net wea3_1 [get_bd_pins wea3] [get_bd_pins blk_mem_gen_3/wea]
  connect_bd_net -net wea4_1 [get_bd_pins wea4] [get_bd_pins blk_mem_gen_4/wea]
  connect_bd_net -net wea5_1 [get_bd_pins wea5] [get_bd_pins blk_mem_gen_5/wea]
  connect_bd_net -net wea6_1 [get_bd_pins wea6] [get_bd_pins blk_mem_gen_6/wea]
  connect_bd_net -net wea7_1 [get_bd_pins wea7] [get_bd_pins blk_mem_gen_7/wea]
  connect_bd_net -net wea_1 [get_bd_pins wea] [get_bd_pins blk_mem_gen_0/wea]

  # Restore current instance
  current_bd_instance $oldCurInst
}
  variable script_folder

  if { $parentCell eq "" } {
     set parentCell [get_bd_cells /]
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj


  # Create interface ports
  set S_AXI_0 [ create_bd_intf_port -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S_AXI_0 ]
  set_property -dict [ list \
   CONFIG.ADDR_WIDTH {16} \
   CONFIG.ARUSER_WIDTH {0} \
   CONFIG.AWUSER_WIDTH {0} \
   CONFIG.BUSER_WIDTH {0} \
   CONFIG.CLK_DOMAIN {/clocking_and_resets/clk_wiz_1_clk_out1} \
   CONFIG.DATA_WIDTH {32} \
   CONFIG.HAS_BRESP {1} \
   CONFIG.HAS_BURST {0} \
   CONFIG.HAS_CACHE {0} \
   CONFIG.HAS_LOCK {0} \
   CONFIG.HAS_PROT {0} \
   CONFIG.HAS_QOS {0} \
   CONFIG.HAS_REGION {0} \
   CONFIG.HAS_RRESP {1} \
   CONFIG.HAS_WSTRB {1} \
   CONFIG.ID_WIDTH {0} \
   CONFIG.MAX_BURST_LENGTH {1} \
   CONFIG.NUM_READ_OUTSTANDING {1} \
   CONFIG.NUM_READ_THREADS {1} \
   CONFIG.NUM_WRITE_OUTSTANDING {1} \
   CONFIG.NUM_WRITE_THREADS {1} \
   CONFIG.PHASE {0.0} \
   CONFIG.PROTOCOL {AXI4LITE} \
   CONFIG.READ_WRITE_MODE {READ_WRITE} \
   CONFIG.RUSER_BITS_PER_BYTE {0} \
   CONFIG.RUSER_WIDTH {0} \
   CONFIG.SUPPORTS_NARROW_BURST {0} \
   CONFIG.WUSER_BITS_PER_BYTE {0} \
   CONFIG.WUSER_WIDTH {0} \
   ] $S_AXI_0

  # Create ports
  set DAC_CS_N_0 [ create_bd_port -dir O DAC_CS_N_0 ]
  set DAC_CS_N_1 [ create_bd_port -dir O DAC_CS_N_1 ]
  set DAC_CS_N_2 [ create_bd_port -dir O DAC_CS_N_2 ]
  set DAC_CS_N_3 [ create_bd_port -dir O DAC_CS_N_3 ]
  set DAC_CS_N_4 [ create_bd_port -dir O DAC_CS_N_4 ]
  set DAC_CS_N_5 [ create_bd_port -dir O DAC_CS_N_5 ]
  set DAC_CS_N_6 [ create_bd_port -dir O DAC_CS_N_6 ]
  set DAC_CS_N_7 [ create_bd_port -dir O DAC_CS_N_7 ]
  set DAC_DAT_0 [ create_bd_port -dir O DAC_DAT_0 ]
  set DAC_DAT_1 [ create_bd_port -dir O DAC_DAT_1 ]
  set DAC_DAT_2 [ create_bd_port -dir O DAC_DAT_2 ]
  set DAC_DAT_3 [ create_bd_port -dir O DAC_DAT_3 ]
  set DAC_DAT_4 [ create_bd_port -dir O DAC_DAT_4 ]
  set DAC_DAT_5 [ create_bd_port -dir O DAC_DAT_5 ]
  set DAC_DAT_6 [ create_bd_port -dir O DAC_DAT_6 ]
  set DAC_DAT_7 [ create_bd_port -dir O DAC_DAT_7 ]
  set DAC_SCLK_0 [ create_bd_port -dir O DAC_SCLK_0 ]
  set DAC_SCLK_1 [ create_bd_port -dir O DAC_SCLK_1 ]
  set DAC_SCLK_2 [ create_bd_port -dir O DAC_SCLK_2 ]
  set DAC_SCLK_3 [ create_bd_port -dir O DAC_SCLK_3 ]
  set DAC_SCLK_4 [ create_bd_port -dir O DAC_SCLK_4 ]
  set DAC_SCLK_5 [ create_bd_port -dir O DAC_SCLK_5 ]
  set DAC_SCLK_6 [ create_bd_port -dir O DAC_SCLK_6 ]
  set DAC_SCLK_7 [ create_bd_port -dir O DAC_SCLK_7 ]
  set S_AXI_ACLK_0 [ create_bd_port -dir I -type clk S_AXI_ACLK_0 ]
  set_property -dict [ list \
   CONFIG.CLK_DOMAIN {/clocking_and_resets/clk_wiz_1_clk_out1} \
   CONFIG.PHASE {0.0} \
 ] $S_AXI_ACLK_0
  set S_AXI_ARESETN_0 [ create_bd_port -dir I -type rst S_AXI_ARESETN_0 ]

  # Create instance: AD5443_Proc_0, and set properties
  set block_name AD5443_Proc
  set block_cell_name AD5443_Proc_0
  if { [catch {set AD5443_Proc_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $AD5443_Proc_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: AD5443_Proc_1, and set properties
  set block_name AD5443_Proc
  set block_cell_name AD5443_Proc_1
  if { [catch {set AD5443_Proc_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $AD5443_Proc_1 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: AD5443_Proc_2, and set properties
  set block_name AD5443_Proc
  set block_cell_name AD5443_Proc_2
  if { [catch {set AD5443_Proc_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $AD5443_Proc_2 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: AD5443_Proc_3, and set properties
  set block_name AD5443_Proc
  set block_cell_name AD5443_Proc_3
  if { [catch {set AD5443_Proc_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $AD5443_Proc_3 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: AD5443_Proc_4, and set properties
  set block_name AD5443_Proc
  set block_cell_name AD5443_Proc_4
  if { [catch {set AD5443_Proc_4 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $AD5443_Proc_4 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: AD5443_Proc_5, and set properties
  set block_name AD5443_Proc
  set block_cell_name AD5443_Proc_5
  if { [catch {set AD5443_Proc_5 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $AD5443_Proc_5 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: AD5443_Proc_6, and set properties
  set block_name AD5443_Proc
  set block_cell_name AD5443_Proc_6
  if { [catch {set AD5443_Proc_6 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $AD5443_Proc_6 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: AD5443_Proc_7, and set properties
  set block_name AD5443_Proc
  set block_cell_name AD5443_Proc_7
  if { [catch {set AD5443_Proc_7 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $AD5443_Proc_7 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: ARB_PWM_Generator_0, and set properties
  set block_name ARB_PWM_Generator
  set block_cell_name ARB_PWM_Generator_0
  if { [catch {set ARB_PWM_Generator_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $ARB_PWM_Generator_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Arb_Mem
  create_hier_cell_Arb_Mem [current_bd_instance .] Arb_Mem

  # Create instance: DAC_PREP_PROC_0, and set properties
  set block_name DAC_PREP_PROC
  set block_cell_name DAC_PREP_PROC_0
  if { [catch {set DAC_PREP_PROC_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $DAC_PREP_PROC_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: DAC_WG_CFG_B_0, and set properties
  set block_name DAC_WG_CFG_B
  set block_cell_name DAC_WG_CFG_B_0
  if { [catch {set DAC_WG_CFG_B_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $DAC_WG_CFG_B_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: dds_compiler_1, and set properties
  set dds_compiler_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:dds_compiler:6.0 dds_compiler_1 ]
  set_property -dict [ list \
   CONFIG.Amplitude_Mode {Full_Range} \
   CONFIG.Channels {8} \
   CONFIG.DATA_Has_TLAST {Not_Required} \
   CONFIG.Frequency_Resolution {0.00003} \
   CONFIG.Has_ACLKEN {true} \
   CONFIG.Has_ARESETn {true} \
   CONFIG.Has_Phase_Out {false} \
   CONFIG.Has_TREADY {false} \
   CONFIG.Latency {8} \
   CONFIG.M_DATA_Has_TUSER {Chan_ID_Field} \
   CONFIG.M_PHASE_Has_TUSER {Not_Required} \
   CONFIG.Noise_Shaping {Auto} \
   CONFIG.Output_Frequency1 {1} \
   CONFIG.Output_Frequency2 {.1} \
   CONFIG.Output_Frequency3 {0.01} \
   CONFIG.Output_Selection {Sine} \
   CONFIG.Output_Width {12} \
   CONFIG.PINC1 {101000111101011100001010001111010111} \
   CONFIG.PINC2 {100000110001001001101110100101111} \
   CONFIG.PINC3 {11010001101101110001011101011} \
   CONFIG.POFF1 {0} \
   CONFIG.POFF2 {0} \
   CONFIG.Phase_Increment {Programmable} \
   CONFIG.Phase_Offset_Angles1 {0} \
   CONFIG.Phase_Offset_Angles2 {0} \
   CONFIG.Phase_Width {39} \
   CONFIG.Phase_offset {Programmable} \
   CONFIG.Resync {false} \
   CONFIG.S_PHASE_Has_TUSER {Not_Required} \
   CONFIG.S_PHASE_TUSER_Width {1} \
   CONFIG.Spurious_Free_Dynamic_Range {72} \
 ] $dds_compiler_1

  # Create interface connections
  connect_bd_intf_net -intf_net DAC_WG_CFG_B_0_DDS_CONFIG [get_bd_intf_pins DAC_WG_CFG_B_0/DDS_CONFIG] [get_bd_intf_pins dds_compiler_1/S_AXIS_CONFIG]
  connect_bd_intf_net -intf_net S_AXI_0_1 [get_bd_intf_ports S_AXI_0] [get_bd_intf_pins DAC_WG_CFG_B_0/S_AXI]
  connect_bd_intf_net -intf_net dds_compiler_1_M_AXIS_DATA [get_bd_intf_pins DAC_PREP_PROC_0/DDS] [get_bd_intf_pins dds_compiler_1/M_AXIS_DATA]

  # Create port connections
  connect_bd_net -net AD5443_Proc_0_DAC_CS_N [get_bd_ports DAC_CS_N_0] [get_bd_pins AD5443_Proc_0/DAC_CS_N]
  connect_bd_net -net AD5443_Proc_0_DAC_DAT [get_bd_ports DAC_DAT_0] [get_bd_pins AD5443_Proc_0/DAC_DAT]
  connect_bd_net -net AD5443_Proc_0_DAC_SCLK [get_bd_ports DAC_SCLK_0] [get_bd_pins AD5443_Proc_0/DAC_SCLK]
  connect_bd_net -net AD5443_Proc_1_DAC_CS_N [get_bd_ports DAC_CS_N_1] [get_bd_pins AD5443_Proc_1/DAC_CS_N]
  connect_bd_net -net AD5443_Proc_1_DAC_DAT [get_bd_ports DAC_DAT_1] [get_bd_pins AD5443_Proc_1/DAC_DAT]
  connect_bd_net -net AD5443_Proc_1_DAC_SCLK [get_bd_ports DAC_SCLK_1] [get_bd_pins AD5443_Proc_1/DAC_SCLK]
  connect_bd_net -net AD5443_Proc_2_DAC_CS_N [get_bd_ports DAC_CS_N_2] [get_bd_pins AD5443_Proc_2/DAC_CS_N]
  connect_bd_net -net AD5443_Proc_2_DAC_DAT [get_bd_ports DAC_DAT_2] [get_bd_pins AD5443_Proc_2/DAC_DAT]
  connect_bd_net -net AD5443_Proc_2_DAC_SCLK [get_bd_ports DAC_SCLK_2] [get_bd_pins AD5443_Proc_2/DAC_SCLK]
  connect_bd_net -net AD5443_Proc_3_DAC_CS_N [get_bd_ports DAC_CS_N_3] [get_bd_pins AD5443_Proc_3/DAC_CS_N]
  connect_bd_net -net AD5443_Proc_3_DAC_DAT [get_bd_ports DAC_DAT_3] [get_bd_pins AD5443_Proc_3/DAC_DAT]
  connect_bd_net -net AD5443_Proc_3_DAC_SCLK [get_bd_ports DAC_SCLK_3] [get_bd_pins AD5443_Proc_3/DAC_SCLK]
  connect_bd_net -net AD5443_Proc_4_DAC_CS_N [get_bd_ports DAC_CS_N_4] [get_bd_pins AD5443_Proc_4/DAC_CS_N]
  connect_bd_net -net AD5443_Proc_4_DAC_DAT [get_bd_ports DAC_DAT_4] [get_bd_pins AD5443_Proc_4/DAC_DAT]
  connect_bd_net -net AD5443_Proc_4_DAC_SCLK [get_bd_ports DAC_SCLK_4] [get_bd_pins AD5443_Proc_4/DAC_SCLK]
  connect_bd_net -net AD5443_Proc_5_DAC_CS_N [get_bd_ports DAC_CS_N_5] [get_bd_pins AD5443_Proc_5/DAC_CS_N]
  connect_bd_net -net AD5443_Proc_5_DAC_DAT [get_bd_ports DAC_DAT_5] [get_bd_pins AD5443_Proc_5/DAC_DAT]
  connect_bd_net -net AD5443_Proc_5_DAC_SCLK [get_bd_ports DAC_SCLK_5] [get_bd_pins AD5443_Proc_5/DAC_SCLK]
  connect_bd_net -net AD5443_Proc_6_DAC_CS_N [get_bd_ports DAC_CS_N_6] [get_bd_pins AD5443_Proc_6/DAC_CS_N]
  connect_bd_net -net AD5443_Proc_6_DAC_DAT [get_bd_ports DAC_DAT_6] [get_bd_pins AD5443_Proc_6/DAC_DAT]
  connect_bd_net -net AD5443_Proc_6_DAC_SCLK [get_bd_ports DAC_SCLK_6] [get_bd_pins AD5443_Proc_6/DAC_SCLK]
  connect_bd_net -net AD5443_Proc_7_DAC_CS_N [get_bd_ports DAC_CS_N_7] [get_bd_pins AD5443_Proc_7/DAC_CS_N]
  connect_bd_net -net AD5443_Proc_7_DAC_DAT [get_bd_ports DAC_DAT_7] [get_bd_pins AD5443_Proc_7/DAC_DAT]
  connect_bd_net -net AD5443_Proc_7_DAC_SCLK [get_bd_ports DAC_SCLK_7] [get_bd_pins AD5443_Proc_7/DAC_SCLK]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_ADDR_0 [get_bd_pins ARB_PWM_Generator_0/ARB_RADDR_0] [get_bd_pins Arb_Mem/addrb] [get_bd_pins DAC_PREP_PROC_0/PWM_0]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_ADDR_1 [get_bd_pins ARB_PWM_Generator_0/ARB_RADDR_1] [get_bd_pins Arb_Mem/addrb1] [get_bd_pins DAC_PREP_PROC_0/PWM_1]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_ADDR_5 [get_bd_pins ARB_PWM_Generator_0/ARB_RADDR_5] [get_bd_pins Arb_Mem/addrb5] [get_bd_pins DAC_PREP_PROC_0/PWM_5]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_ADDR_6 [get_bd_pins ARB_PWM_Generator_0/ARB_RADDR_6] [get_bd_pins Arb_Mem/addrb6] [get_bd_pins DAC_PREP_PROC_0/PWM_6]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_REN_0 [get_bd_pins ARB_PWM_Generator_0/ARB_REN_0] [get_bd_pins Arb_Mem/enb]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_REN_1 [get_bd_pins ARB_PWM_Generator_0/ARB_REN_1] [get_bd_pins Arb_Mem/enb1]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_REN_2 [get_bd_pins ARB_PWM_Generator_0/ARB_REN_2] [get_bd_pins Arb_Mem/enb2]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_REN_3 [get_bd_pins ARB_PWM_Generator_0/ARB_REN_3] [get_bd_pins Arb_Mem/enb3]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_REN_4 [get_bd_pins ARB_PWM_Generator_0/ARB_REN_4] [get_bd_pins Arb_Mem/enb4]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_REN_5 [get_bd_pins ARB_PWM_Generator_0/ARB_REN_5] [get_bd_pins Arb_Mem/enb5]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_REN_6 [get_bd_pins ARB_PWM_Generator_0/ARB_REN_6] [get_bd_pins Arb_Mem/enb6]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_REN_7 [get_bd_pins ARB_PWM_Generator_0/ARB_REN_7] [get_bd_pins Arb_Mem/enb7]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WADDR_0 [get_bd_pins ARB_PWM_Generator_0/ARB_WADDR_0] [get_bd_pins Arb_Mem/addra]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WADDR_1 [get_bd_pins ARB_PWM_Generator_0/ARB_WADDR_1] [get_bd_pins Arb_Mem/addra1]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WADDR_2 [get_bd_pins ARB_PWM_Generator_0/ARB_WADDR_2] [get_bd_pins Arb_Mem/addra2]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WADDR_3 [get_bd_pins ARB_PWM_Generator_0/ARB_WADDR_3] [get_bd_pins Arb_Mem/addra3]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WADDR_4 [get_bd_pins ARB_PWM_Generator_0/ARB_WADDR_4] [get_bd_pins Arb_Mem/addra4]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WADDR_5 [get_bd_pins ARB_PWM_Generator_0/ARB_WADDR_5] [get_bd_pins Arb_Mem/addra5]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WADDR_6 [get_bd_pins ARB_PWM_Generator_0/ARB_WADDR_6] [get_bd_pins Arb_Mem/addra6]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WADDR_7 [get_bd_pins ARB_PWM_Generator_0/ARB_WADDR_7] [get_bd_pins Arb_Mem/addra7]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WDATA_0 [get_bd_pins ARB_PWM_Generator_0/ARB_WDATA_0] [get_bd_pins Arb_Mem/dina]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WDATA_1 [get_bd_pins ARB_PWM_Generator_0/ARB_WDATA_1] [get_bd_pins Arb_Mem/dina1]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WDATA_2 [get_bd_pins ARB_PWM_Generator_0/ARB_WDATA_2] [get_bd_pins Arb_Mem/dina2]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WDATA_3 [get_bd_pins ARB_PWM_Generator_0/ARB_WDATA_3] [get_bd_pins Arb_Mem/dina3]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WDATA_4 [get_bd_pins ARB_PWM_Generator_0/ARB_WDATA_4] [get_bd_pins Arb_Mem/dina4]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WDATA_5 [get_bd_pins ARB_PWM_Generator_0/ARB_WDATA_5] [get_bd_pins Arb_Mem/dina5]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WDATA_6 [get_bd_pins ARB_PWM_Generator_0/ARB_WDATA_6] [get_bd_pins Arb_Mem/dina6]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WDATA_7 [get_bd_pins ARB_PWM_Generator_0/ARB_WDATA_7] [get_bd_pins Arb_Mem/dina7]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WEN_0 [get_bd_pins ARB_PWM_Generator_0/ARB_WEN_0] [get_bd_pins Arb_Mem/wea]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WEN_1 [get_bd_pins ARB_PWM_Generator_0/ARB_WEN_1] [get_bd_pins Arb_Mem/wea1]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WEN_2 [get_bd_pins ARB_PWM_Generator_0/ARB_WEN_2] [get_bd_pins Arb_Mem/wea2]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WEN_3 [get_bd_pins ARB_PWM_Generator_0/ARB_WEN_3] [get_bd_pins Arb_Mem/wea3]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WEN_4 [get_bd_pins ARB_PWM_Generator_0/ARB_WEN_4] [get_bd_pins Arb_Mem/wea4]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WEN_5 [get_bd_pins ARB_PWM_Generator_0/ARB_WEN_5] [get_bd_pins Arb_Mem/wea5]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WEN_6 [get_bd_pins ARB_PWM_Generator_0/ARB_WEN_6] [get_bd_pins Arb_Mem/wea6]
  connect_bd_net -net ARB_PWM_Generator_0_ARB_WEN_7 [get_bd_pins ARB_PWM_Generator_0/ARB_WEN_7] [get_bd_pins Arb_Mem/wea7]
  connect_bd_net -net Arb_Mem_doutb [get_bd_pins Arb_Mem/doutb] [get_bd_pins DAC_PREP_PROC_0/ARB_0]
  connect_bd_net -net Arb_Mem_doutb1 [get_bd_pins Arb_Mem/doutb1] [get_bd_pins DAC_PREP_PROC_0/ARB_1]
  connect_bd_net -net Arb_Mem_doutb2 [get_bd_pins Arb_Mem/doutb2] [get_bd_pins DAC_PREP_PROC_0/ARB_2]
  connect_bd_net -net Arb_Mem_doutb3 [get_bd_pins Arb_Mem/doutb3] [get_bd_pins DAC_PREP_PROC_0/ARB_3]
  connect_bd_net -net Arb_Mem_doutb4 [get_bd_pins Arb_Mem/doutb4] [get_bd_pins DAC_PREP_PROC_0/ARB_4]
  connect_bd_net -net Arb_Mem_doutb5 [get_bd_pins Arb_Mem/doutb5] [get_bd_pins DAC_PREP_PROC_0/ARB_5]
  connect_bd_net -net Arb_Mem_doutb6 [get_bd_pins Arb_Mem/doutb6] [get_bd_pins DAC_PREP_PROC_0/ARB_6]
  connect_bd_net -net Arb_Mem_doutb7 [get_bd_pins Arb_Mem/doutb7] [get_bd_pins DAC_PREP_PROC_0/ARB_7]
  connect_bd_net -net DAC_PREP_PROC_0_CH_0_CS [get_bd_pins AD5443_Proc_0/DAC_ENABLE] [get_bd_pins DAC_PREP_PROC_0/CH0_EN]
  connect_bd_net -net DAC_PREP_PROC_0_CH_0_DOUT [get_bd_pins AD5443_Proc_0/NEW_DAC_VALUE] [get_bd_pins DAC_PREP_PROC_0/CH0_DOUT]
  connect_bd_net -net DAC_PREP_PROC_0_CH_1_CS [get_bd_pins AD5443_Proc_1/DAC_ENABLE] [get_bd_pins DAC_PREP_PROC_0/CH1_EN]
  connect_bd_net -net DAC_PREP_PROC_0_CH_1_DOUT [get_bd_pins AD5443_Proc_1/NEW_DAC_VALUE] [get_bd_pins DAC_PREP_PROC_0/CH1_DOUT]
  connect_bd_net -net DAC_PREP_PROC_0_CH_2_CS [get_bd_pins AD5443_Proc_2/DAC_ENABLE] [get_bd_pins DAC_PREP_PROC_0/CH2_EN]
  connect_bd_net -net DAC_PREP_PROC_0_CH_2_DOUT [get_bd_pins AD5443_Proc_2/NEW_DAC_VALUE] [get_bd_pins DAC_PREP_PROC_0/CH2_DOUT]
  connect_bd_net -net DAC_PREP_PROC_0_CH_3_CS [get_bd_pins AD5443_Proc_3/DAC_ENABLE] [get_bd_pins DAC_PREP_PROC_0/CH3_EN]
  connect_bd_net -net DAC_PREP_PROC_0_CH_3_DOUT [get_bd_pins AD5443_Proc_3/NEW_DAC_VALUE] [get_bd_pins DAC_PREP_PROC_0/CH3_DOUT]
  connect_bd_net -net DAC_PREP_PROC_0_CH_4_CS [get_bd_pins AD5443_Proc_4/DAC_ENABLE] [get_bd_pins DAC_PREP_PROC_0/CH4_EN]
  connect_bd_net -net DAC_PREP_PROC_0_CH_4_DOUT [get_bd_pins AD5443_Proc_4/NEW_DAC_VALUE] [get_bd_pins DAC_PREP_PROC_0/CH4_DOUT]
  connect_bd_net -net DAC_PREP_PROC_0_CH_5_CS [get_bd_pins AD5443_Proc_5/DAC_ENABLE] [get_bd_pins DAC_PREP_PROC_0/CH5_EN]
  connect_bd_net -net DAC_PREP_PROC_0_CH_5_DOUT [get_bd_pins AD5443_Proc_5/NEW_DAC_VALUE] [get_bd_pins DAC_PREP_PROC_0/CH5_DOUT]
  connect_bd_net -net DAC_PREP_PROC_0_CH_6_CS [get_bd_pins AD5443_Proc_6/DAC_ENABLE] [get_bd_pins DAC_PREP_PROC_0/CH6_EN]
  connect_bd_net -net DAC_PREP_PROC_0_CH_6_DOUT [get_bd_pins AD5443_Proc_6/NEW_DAC_VALUE] [get_bd_pins DAC_PREP_PROC_0/CH6_DOUT]
  connect_bd_net -net DAC_PREP_PROC_0_CH_7_CS [get_bd_pins AD5443_Proc_7/DAC_ENABLE] [get_bd_pins DAC_PREP_PROC_0/CH7_EN]
  connect_bd_net -net DAC_PREP_PROC_0_CH_7_DOUT [get_bd_pins AD5443_Proc_7/NEW_DAC_VALUE] [get_bd_pins DAC_PREP_PROC_0/CH7_DOUT]
  connect_bd_net -net DAC_WG_CFG_0_ARB_2_ADDR [get_bd_pins ARB_PWM_Generator_0/ARB_RADDR_2] [get_bd_pins Arb_Mem/addrb2] [get_bd_pins DAC_PREP_PROC_0/PWM_2]
  connect_bd_net -net DAC_WG_CFG_0_ARB_3_ADDR [get_bd_pins ARB_PWM_Generator_0/ARB_RADDR_3] [get_bd_pins Arb_Mem/addrb3] [get_bd_pins DAC_PREP_PROC_0/PWM_3]
  connect_bd_net -net DAC_WG_CFG_0_ARB_4_ADDR [get_bd_pins ARB_PWM_Generator_0/ARB_RADDR_4] [get_bd_pins Arb_Mem/addrb4] [get_bd_pins DAC_PREP_PROC_0/PWM_4]
  connect_bd_net -net DAC_WG_CFG_0_ARB_7_ADDR [get_bd_pins ARB_PWM_Generator_0/ARB_RADDR_7] [get_bd_pins Arb_Mem/addrb7] [get_bd_pins DAC_PREP_PROC_0/PWM_7]
  connect_bd_net -net DAC_WG_CFG_0_RESYNC [get_bd_pins ARB_PWM_Generator_0/M_RESYNC] [get_bd_pins DAC_PREP_PROC_0/M_RESYNC] [get_bd_pins DAC_WG_CFG_B_0/RESYNC]
  connect_bd_net -net DAC_WG_CFG_B_0_CHAN_MODE_VECTOR [get_bd_pins DAC_PREP_PROC_0/CHAN_MODE_VECTOR_IN] [get_bd_pins DAC_WG_CFG_B_0/CHAN_MODE_VECTOR]
  connect_bd_net -net DAC_WG_CFG_B_0_GAIN_VECTOR [get_bd_pins DAC_PREP_PROC_0/GAIN_VECTOR_IN] [get_bd_pins DAC_WG_CFG_B_0/GAIN_VECTOR]
  connect_bd_net -net DAC_WG_CFG_B_0_OFFSET_VECTOR [get_bd_pins DAC_PREP_PROC_0/OFFSET_VECTOR_IN] [get_bd_pins DAC_WG_CFG_B_0/OFFSET_VECTOR]
  connect_bd_net -net DAC_WG_CFG_B_0_PWM_ARB_0 [get_bd_pins ARB_PWM_Generator_0/ARB_PWM_IN_0] [get_bd_pins DAC_WG_CFG_B_0/PWM_ARB_0]
  connect_bd_net -net DAC_WG_CFG_B_0_PWM_ARB_1 [get_bd_pins ARB_PWM_Generator_0/ARB_PWM_IN_1] [get_bd_pins DAC_WG_CFG_B_0/PWM_ARB_1]
  connect_bd_net -net DAC_WG_CFG_B_0_PWM_ARB_2 [get_bd_pins ARB_PWM_Generator_0/ARB_PWM_IN_2] [get_bd_pins DAC_WG_CFG_B_0/PWM_ARB_2]
  connect_bd_net -net DAC_WG_CFG_B_0_PWM_ARB_3 [get_bd_pins ARB_PWM_Generator_0/ARB_PWM_IN_3] [get_bd_pins DAC_WG_CFG_B_0/PWM_ARB_3]
  connect_bd_net -net DAC_WG_CFG_B_0_PWM_ARB_4 [get_bd_pins ARB_PWM_Generator_0/ARB_PWM_IN_4] [get_bd_pins DAC_WG_CFG_B_0/PWM_ARB_4]
  connect_bd_net -net DAC_WG_CFG_B_0_PWM_ARB_5 [get_bd_pins ARB_PWM_Generator_0/ARB_PWM_IN_5] [get_bd_pins DAC_WG_CFG_B_0/PWM_ARB_5]
  connect_bd_net -net DAC_WG_CFG_B_0_PWM_ARB_6 [get_bd_pins ARB_PWM_Generator_0/ARB_PWM_IN_6] [get_bd_pins DAC_WG_CFG_B_0/PWM_ARB_6]
  connect_bd_net -net DAC_WG_CFG_B_0_PWM_ARB_7 [get_bd_pins ARB_PWM_Generator_0/ARB_PWM_IN_7] [get_bd_pins DAC_WG_CFG_B_0/PWM_ARB_7]
  connect_bd_net -net DAC_WG_CFG_B_0_PWM_ARB_TICK [get_bd_pins ARB_PWM_Generator_0/PWM_ARB_TICK_IN] [get_bd_pins DAC_WG_CFG_B_0/PWM_ARB_TICK]
  connect_bd_net -net DAC_WG_CFG_B_0_WRITE_ARB [get_bd_pins ARB_PWM_Generator_0/M_WRITE] [get_bd_pins DAC_WG_CFG_B_0/WRITE_ARB]
  connect_bd_net -net S_AXI_ACLK_0_1 [get_bd_ports S_AXI_ACLK_0] [get_bd_pins AD5443_Proc_0/MAIN_CLOCK] [get_bd_pins AD5443_Proc_1/MAIN_CLOCK] [get_bd_pins AD5443_Proc_2/MAIN_CLOCK] [get_bd_pins AD5443_Proc_3/MAIN_CLOCK] [get_bd_pins AD5443_Proc_4/MAIN_CLOCK] [get_bd_pins AD5443_Proc_5/MAIN_CLOCK] [get_bd_pins AD5443_Proc_6/MAIN_CLOCK] [get_bd_pins AD5443_Proc_7/MAIN_CLOCK] [get_bd_pins ARB_PWM_Generator_0/S_AXI_ACLK] [get_bd_pins Arb_Mem/aclk] [get_bd_pins DAC_PREP_PROC_0/S_AXI_ACLK] [get_bd_pins DAC_WG_CFG_B_0/S_AXI_ACLK] [get_bd_pins dds_compiler_1/aclk]
  connect_bd_net -net S_AXI_ARESETN_0_1 [get_bd_ports S_AXI_ARESETN_0] [get_bd_pins DAC_WG_CFG_B_0/S_AXI_ARESETN] [get_bd_pins dds_compiler_1/aresetn]

  # Create address segments


  # Restore current instance
  current_bd_instance $oldCurInst

  save_bd_design
common::send_msg_id "BD_TCL-1000" "WARNING" "This Tcl script was generated from a block design that has not been validated. It is possible that design <$design_name> may result in errors during validation."

  close_bd_design $design_name 
}
# End of cr_bd_Wave_Generation_Only()
cr_bd_Wave_Generation_Only ""
set_property EXCLUDE_DEBUG_LOGIC "0" [get_files Wave_Generation_Only.bd ] 
set_property GENERATE_SYNTH_CHECKPOINT "1" [get_files Wave_Generation_Only.bd ] 
set_property IS_ENABLED "1" [get_files Wave_Generation_Only.bd ] 
set_property IS_GLOBAL_INCLUDE "0" [get_files Wave_Generation_Only.bd ] 
set_property IS_LOCKED "0" [get_files Wave_Generation_Only.bd ] 
set_property LIBRARY "xil_defaultlib" [get_files Wave_Generation_Only.bd ] 
set_property PATH_MODE "RelativeFirst" [get_files Wave_Generation_Only.bd ] 
set_property PFM_NAME "" [get_files Wave_Generation_Only.bd ] 
set_property SYNTH_CHECKPOINT_MODE "Hierarchical" [get_files Wave_Generation_Only.bd ] 
set_property USED_IN "synthesis implementation simulation" [get_files Wave_Generation_Only.bd ] 
set_property USED_IN_IMPLEMENTATION "1" [get_files Wave_Generation_Only.bd ] 
set_property USED_IN_SIMULATION "1" [get_files Wave_Generation_Only.bd ] 
set_property USED_IN_SYNTHESIS "1" [get_files Wave_Generation_Only.bd ] 

# Create 'synth_1' run (if not found)
if {[string equal [get_runs -quiet synth_1] ""]} {
  create_run -name synth_1 -part xc7a35tcsg325-1 -flow {Vivado Synthesis 2017} -strategy "Flow_RuntimeOptimized" -constrset constrs_1
} else {
  set_property strategy "Flow_RuntimeOptimized" [get_runs synth_1]
  set_property flow "Vivado Synthesis 2017" [get_runs synth_1]
}
set obj [get_runs synth_1]
set_property -name "constrset" -value "constrs_1" -objects $obj
set_property -name "description" -value "Trades off Performance and Area for better Runtime." -objects $obj
set_property -name "flow" -value "Vivado Synthesis 2017" -objects $obj
set_property -name "name" -value "synth_1" -objects $obj
set_property -name "needs_refresh" -value "0" -objects $obj
set_property -name "part" -value "xc7a35tcsg325-1" -objects $obj
set_property -name "srcset" -value "sources_1" -objects $obj
set_property -name "incremental_checkpoint" -value "" -objects $obj
set_property -name "include_in_archive" -value "1" -objects $obj
set_property -name "report_strategy" -value "Vivado Synthesis Default Reports" -objects $obj
set_property -name "strategy" -value "Flow_RuntimeOptimized" -objects $obj
set_property -name "steps.synth_design.tcl.pre" -value "" -objects $obj
set_property -name "steps.synth_design.tcl.post" -value "" -objects $obj
set_property -name "steps.synth_design.args.flatten_hierarchy" -value "none" -objects $obj
set_property -name "steps.synth_design.args.gated_clock_conversion" -value "off" -objects $obj
set_property -name "steps.synth_design.args.bufg" -value "12" -objects $obj
set_property -name "steps.synth_design.args.fanout_limit" -value "10000" -objects $obj
set_property -name "steps.synth_design.args.directive" -value "RuntimeOptimized" -objects $obj
set_property -name "steps.synth_design.args.retiming" -value "0" -objects $obj
set_property -name "steps.synth_design.args.fsm_extraction" -value "off" -objects $obj
set_property -name "steps.synth_design.args.keep_equivalent_registers" -value "0" -objects $obj
set_property -name "steps.synth_design.args.resource_sharing" -value "auto" -objects $obj
set_property -name "steps.synth_design.args.control_set_opt_threshold" -value "auto" -objects $obj
set_property -name "steps.synth_design.args.no_lc" -value "0" -objects $obj
set_property -name "steps.synth_design.args.no_srlextract" -value "0" -objects $obj
set_property -name "steps.synth_design.args.shreg_min_size" -value "3" -objects $obj
set_property -name "steps.synth_design.args.max_bram" -value "-1" -objects $obj
set_property -name "steps.synth_design.args.max_uram" -value "-1" -objects $obj
set_property -name "steps.synth_design.args.max_dsp" -value "-1" -objects $obj
set_property -name "steps.synth_design.args.max_bram_cascade_height" -value "-1" -objects $obj
set_property -name "steps.synth_design.args.max_uram_cascade_height" -value "-1" -objects $obj
set_property -name "steps.synth_design.args.cascade_dsp" -value "auto" -objects $obj
set_property -name "steps.synth_design.args.assert" -value "0" -objects $obj
set_property -name "steps.synth_design.args.more options" -value "" -objects $obj

set reports [get_report_configs -of_objects $obj]
if { [llength $reports ] > 0 } {
  delete_report_config [get_report_configs -of_objects $obj]
}
# Create 'synth_1_synth_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0] "" ] } {
  create_report_config -report_name synth_1_synth_report_utilization_0 -report_type report_utilization:1.0 -steps synth_design -runs synth_1
}
set obj [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "1" -objects $obj
set_property -name "options.pblocks" -value "" -objects $obj
set_property -name "options.cells" -value "" -objects $obj
set_property -name "options.slr" -value "0" -objects $obj
set_property -name "options.packthru" -value "0" -objects $obj
set_property -name "options.hierarchical" -value "0" -objects $obj
set_property -name "options.hierarchical_depth" -value "" -objects $obj
set_property -name "options.hierarchical_percentages" -value "0" -objects $obj
set_property -name "options.more_options" -value "" -objects $obj

}
# set the current synth run
current_run -synthesis [get_runs synth_1]

# Create 'impl_1' run (if not found)
if {[string equal [get_runs -quiet impl_1] ""]} {
  create_run -name impl_1 -part xc7a35tcsg325-1 -flow {Vivado Implementation 2017} -strategy "Vivado Implementation Defaults" -constrset constrs_1 -parent_run synth_1
} else {
  set_property strategy "Vivado Implementation Defaults" [get_runs impl_1]
  set_property flow "Vivado Implementation 2017" [get_runs impl_1]
}
set obj [get_runs impl_1]
set_property -name "constrset" -value "constrs_1" -objects $obj
set_property -name "description" -value "Default settings for Implementation." -objects $obj
set_property -name "flow" -value "Vivado Implementation 2017" -objects $obj
set_property -name "name" -value "impl_1" -objects $obj
set_property -name "needs_refresh" -value "0" -objects $obj
set_property -name "part" -value "xc7a35tcsg325-1" -objects $obj
set_property -name "pr_configuration" -value "" -objects $obj
set_property -name "srcset" -value "sources_1" -objects $obj
set_property -name "incremental_checkpoint" -value "" -objects $obj
set_property -name "include_in_archive" -value "1" -objects $obj
set_property -name "report_strategy" -value "Vivado Implementation Default Reports" -objects $obj
set_property -name "strategy" -value "Vivado Implementation Defaults" -objects $obj
set_property -name "steps.opt_design.is_enabled" -value "1" -objects $obj
set_property -name "steps.opt_design.tcl.pre" -value "" -objects $obj
set_property -name "steps.opt_design.tcl.post" -value "" -objects $obj
set_property -name "steps.opt_design.args.verbose" -value "0" -objects $obj
set_property -name "steps.opt_design.args.directive" -value "Default" -objects $obj
set_property -name "steps.opt_design.args.more options" -value "" -objects $obj
set_property -name "steps.power_opt_design.is_enabled" -value "0" -objects $obj
set_property -name "steps.power_opt_design.tcl.pre" -value "" -objects $obj
set_property -name "steps.power_opt_design.tcl.post" -value "" -objects $obj
set_property -name "steps.power_opt_design.args.more options" -value "" -objects $obj
set_property -name "steps.place_design.tcl.pre" -value "" -objects $obj
set_property -name "steps.place_design.tcl.post" -value "" -objects $obj
set_property -name "steps.place_design.args.directive" -value "Default" -objects $obj
set_property -name "steps.place_design.args.more options" -value "" -objects $obj
set_property -name "steps.post_place_power_opt_design.is_enabled" -value "0" -objects $obj
set_property -name "steps.post_place_power_opt_design.tcl.pre" -value "" -objects $obj
set_property -name "steps.post_place_power_opt_design.tcl.post" -value "" -objects $obj
set_property -name "steps.post_place_power_opt_design.args.more options" -value "" -objects $obj
set_property -name "steps.phys_opt_design.is_enabled" -value "0" -objects $obj
set_property -name "steps.phys_opt_design.tcl.pre" -value "" -objects $obj
set_property -name "steps.phys_opt_design.tcl.post" -value "" -objects $obj
set_property -name "steps.phys_opt_design.args.directive" -value "Default" -objects $obj
set_property -name "steps.phys_opt_design.args.more options" -value "" -objects $obj
set_property -name "steps.route_design.tcl.pre" -value "" -objects $obj
set_property -name "steps.route_design.tcl.post" -value "" -objects $obj
set_property -name "steps.route_design.args.directive" -value "Default" -objects $obj
set_property -name "steps.route_design.args.more options" -value "" -objects $obj
set_property -name "steps.post_route_phys_opt_design.is_enabled" -value "0" -objects $obj
set_property -name "steps.post_route_phys_opt_design.tcl.pre" -value "" -objects $obj
set_property -name "steps.post_route_phys_opt_design.tcl.post" -value "" -objects $obj
set_property -name "steps.post_route_phys_opt_design.args.directive" -value "Default" -objects $obj
set_property -name "steps.post_route_phys_opt_design.args.more options" -value "" -objects $obj
set_property -name "steps.write_bitstream.tcl.pre" -value "" -objects $obj
set_property -name "steps.write_bitstream.tcl.post" -value "" -objects $obj
set_property -name "steps.write_bitstream.args.raw_bitfile" -value "0" -objects $obj
set_property -name "steps.write_bitstream.args.mask_file" -value "0" -objects $obj
set_property -name "steps.write_bitstream.args.no_binary_bitfile" -value "0" -objects $obj
set_property -name "steps.write_bitstream.args.bin_file" -value "1" -objects $obj
set_property -name "steps.write_bitstream.args.readback_file" -value "0" -objects $obj
set_property -name "steps.write_bitstream.args.logic_location_file" -value "0" -objects $obj
set_property -name "steps.write_bitstream.args.verbose" -value "0" -objects $obj
set_property -name "steps.write_bitstream.args.more options" -value "" -objects $obj

set reports [get_report_configs -of_objects $obj]
if { [llength $reports ] > 0 } {
  delete_report_config [get_report_configs -of_objects $obj]
}
# Create 'impl_1_init_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_init_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps init_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.check_timing_verbose" -value "0" -objects $obj
set_property -name "options.delay_type" -value "" -objects $obj
set_property -name "options.setup" -value "0" -objects $obj
set_property -name "options.hold" -value "0" -objects $obj
set_property -name "options.max_paths" -value "" -objects $obj
set_property -name "options.nworst" -value "" -objects $obj
set_property -name "options.unique_pins" -value "0" -objects $obj
set_property -name "options.path_type" -value "" -objects $obj
set_property -name "options.slack_lesser_than" -value "" -objects $obj
set_property -name "options.report_unconstrained" -value "0" -objects $obj
set_property -name "options.warn_on_violation" -value "0" -objects $obj
set_property -name "options.significant_digits" -value "" -objects $obj
set_property -name "options.cell" -value "" -objects $obj
set_property -name "options.more_options" -value "" -objects $obj

}
# Create 'impl_1_opt_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_drc_0 -report_type report_drc:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "1" -objects $obj
set_property -name "options.upgrade_cw" -value "0" -objects $obj
set_property -name "options.checks" -value "" -objects $obj
set_property -name "options.ruledecks" -value "" -objects $obj
set_property -name "options.more_options" -value "" -objects $obj

}
# Create 'impl_1_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.check_timing_verbose" -value "0" -objects $obj
set_property -name "options.delay_type" -value "" -objects $obj
set_property -name "options.setup" -value "0" -objects $obj
set_property -name "options.hold" -value "0" -objects $obj
set_property -name "options.max_paths" -value "" -objects $obj
set_property -name "options.nworst" -value "" -objects $obj
set_property -name "options.unique_pins" -value "0" -objects $obj
set_property -name "options.path_type" -value "" -objects $obj
set_property -name "options.slack_lesser_than" -value "" -objects $obj
set_property -name "options.report_unconstrained" -value "0" -objects $obj
set_property -name "options.warn_on_violation" -value "0" -objects $obj
set_property -name "options.significant_digits" -value "" -objects $obj
set_property -name "options.cell" -value "" -objects $obj
set_property -name "options.more_options" -value "" -objects $obj

}
# Create 'impl_1_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.check_timing_verbose" -value "0" -objects $obj
set_property -name "options.delay_type" -value "" -objects $obj
set_property -name "options.setup" -value "0" -objects $obj
set_property -name "options.hold" -value "0" -objects $obj
set_property -name "options.max_paths" -value "" -objects $obj
set_property -name "options.nworst" -value "" -objects $obj
set_property -name "options.unique_pins" -value "0" -objects $obj
set_property -name "options.path_type" -value "" -objects $obj
set_property -name "options.slack_lesser_than" -value "" -objects $obj
set_property -name "options.report_unconstrained" -value "0" -objects $obj
set_property -name "options.warn_on_violation" -value "0" -objects $obj
set_property -name "options.significant_digits" -value "" -objects $obj
set_property -name "options.cell" -value "" -objects $obj
set_property -name "options.more_options" -value "" -objects $obj

}
# Create 'impl_1_place_report_io_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0] "" ] } {
  create_report_config -report_name impl_1_place_report_io_0 -report_type report_io:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "1" -objects $obj
set_property -name "options.more_options" -value "" -objects $obj

}
# Create 'impl_1_place_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0] "" ] } {
  create_report_config -report_name impl_1_place_report_utilization_0 -report_type report_utilization:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "1" -objects $obj
set_property -name "options.pblocks" -value "" -objects $obj
set_property -name "options.cells" -value "" -objects $obj
set_property -name "options.slr" -value "0" -objects $obj
set_property -name "options.packthru" -value "0" -objects $obj
set_property -name "options.hierarchical" -value "0" -objects $obj
set_property -name "options.hierarchical_depth" -value "" -objects $obj
set_property -name "options.hierarchical_percentages" -value "0" -objects $obj
set_property -name "options.more_options" -value "" -objects $obj

}
# Create 'impl_1_place_report_control_sets_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0] "" ] } {
  create_report_config -report_name impl_1_place_report_control_sets_0 -report_type report_control_sets:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "1" -objects $obj
set_property -name "options.verbose" -value "0" -objects $obj
set_property -name "options.cells" -value "" -objects $obj
set_property -name "options.more_options" -value "" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.cells" -value "" -objects $obj
set_property -name "options.hierarchical" -value "0" -objects $obj
set_property -name "options.hierarchical_depth" -value "" -objects $obj
set_property -name "options.more_options" -value "" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_1' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_1 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.cells" -value "" -objects $obj
set_property -name "options.hierarchical" -value "0" -objects $obj
set_property -name "options.hierarchical_depth" -value "" -objects $obj
set_property -name "options.more_options" -value "" -objects $obj

}
# Create 'impl_1_place_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_place_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.check_timing_verbose" -value "0" -objects $obj
set_property -name "options.delay_type" -value "" -objects $obj
set_property -name "options.setup" -value "0" -objects $obj
set_property -name "options.hold" -value "0" -objects $obj
set_property -name "options.max_paths" -value "" -objects $obj
set_property -name "options.nworst" -value "" -objects $obj
set_property -name "options.unique_pins" -value "0" -objects $obj
set_property -name "options.path_type" -value "" -objects $obj
set_property -name "options.slack_lesser_than" -value "" -objects $obj
set_property -name "options.report_unconstrained" -value "0" -objects $obj
set_property -name "options.warn_on_violation" -value "0" -objects $obj
set_property -name "options.significant_digits" -value "" -objects $obj
set_property -name "options.cell" -value "" -objects $obj
set_property -name "options.more_options" -value "" -objects $obj

}
# Create 'impl_1_post_place_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_place_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_place_power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.check_timing_verbose" -value "0" -objects $obj
set_property -name "options.delay_type" -value "" -objects $obj
set_property -name "options.setup" -value "0" -objects $obj
set_property -name "options.hold" -value "0" -objects $obj
set_property -name "options.max_paths" -value "" -objects $obj
set_property -name "options.nworst" -value "" -objects $obj
set_property -name "options.unique_pins" -value "0" -objects $obj
set_property -name "options.path_type" -value "" -objects $obj
set_property -name "options.slack_lesser_than" -value "" -objects $obj
set_property -name "options.report_unconstrained" -value "0" -objects $obj
set_property -name "options.warn_on_violation" -value "0" -objects $obj
set_property -name "options.significant_digits" -value "" -objects $obj
set_property -name "options.cell" -value "" -objects $obj
set_property -name "options.more_options" -value "" -objects $obj

}
# Create 'impl_1_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.check_timing_verbose" -value "0" -objects $obj
set_property -name "options.delay_type" -value "" -objects $obj
set_property -name "options.setup" -value "0" -objects $obj
set_property -name "options.hold" -value "0" -objects $obj
set_property -name "options.max_paths" -value "" -objects $obj
set_property -name "options.nworst" -value "" -objects $obj
set_property -name "options.unique_pins" -value "0" -objects $obj
set_property -name "options.path_type" -value "" -objects $obj
set_property -name "options.slack_lesser_than" -value "" -objects $obj
set_property -name "options.report_unconstrained" -value "0" -objects $obj
set_property -name "options.warn_on_violation" -value "0" -objects $obj
set_property -name "options.significant_digits" -value "" -objects $obj
set_property -name "options.cell" -value "" -objects $obj
set_property -name "options.more_options" -value "" -objects $obj

}
# Create 'impl_1_route_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_route_report_drc_0 -report_type report_drc:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "1" -objects $obj
set_property -name "options.upgrade_cw" -value "0" -objects $obj
set_property -name "options.checks" -value "" -objects $obj
set_property -name "options.ruledecks" -value "" -objects $obj
set_property -name "options.more_options" -value "" -objects $obj

}
# Create 'impl_1_route_report_methodology_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0] "" ] } {
  create_report_config -report_name impl_1_route_report_methodology_0 -report_type report_methodology:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "1" -objects $obj
set_property -name "options.checks" -value "" -objects $obj
set_property -name "options.more_options" -value "" -objects $obj

}
# Create 'impl_1_route_report_power_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0] "" ] } {
  create_report_config -report_name impl_1_route_report_power_0 -report_type report_power:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "1" -objects $obj
set_property -name "options.advisory" -value "0" -objects $obj
set_property -name "options.xpe" -value "" -objects $obj
set_property -name "options.more_options" -value "" -objects $obj

}
# Create 'impl_1_route_report_route_status_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0] "" ] } {
  create_report_config -report_name impl_1_route_report_route_status_0 -report_type report_route_status:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "1" -objects $obj
set_property -name "options.of_objects" -value "" -objects $obj
set_property -name "options.route_type" -value "" -objects $obj
set_property -name "options.list_all_nets" -value "0" -objects $obj
set_property -name "options.show_all" -value "0" -objects $obj
set_property -name "options.has_routing" -value "0" -objects $obj
set_property -name "options.more_options" -value "" -objects $obj

}
# Create 'impl_1_route_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_route_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "1" -objects $obj
set_property -name "options.check_timing_verbose" -value "0" -objects $obj
set_property -name "options.delay_type" -value "" -objects $obj
set_property -name "options.setup" -value "0" -objects $obj
set_property -name "options.hold" -value "0" -objects $obj
set_property -name "options.max_paths" -value "" -objects $obj
set_property -name "options.nworst" -value "" -objects $obj
set_property -name "options.unique_pins" -value "0" -objects $obj
set_property -name "options.path_type" -value "" -objects $obj
set_property -name "options.slack_lesser_than" -value "" -objects $obj
set_property -name "options.report_unconstrained" -value "0" -objects $obj
set_property -name "options.warn_on_violation" -value "0" -objects $obj
set_property -name "options.significant_digits" -value "" -objects $obj
set_property -name "options.cell" -value "" -objects $obj
set_property -name "options.more_options" -value "" -objects $obj

}
# Create 'impl_1_route_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_route_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "1" -objects $obj
set_property -name "options.cells" -value "" -objects $obj
set_property -name "options.hierarchical" -value "0" -objects $obj
set_property -name "options.hierarchical_depth" -value "" -objects $obj
set_property -name "options.more_options" -value "" -objects $obj

}
# Create 'impl_1_route_report_clock_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0] "" ] } {
  create_report_config -report_name impl_1_route_report_clock_utilization_0 -report_type report_clock_utilization:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "1" -objects $obj
set_property -name "options.write_xdc" -value "0" -objects $obj
set_property -name "options.clock_roots_only" -value "0" -objects $obj
set_property -name "options.more_options" -value "" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "1" -objects $obj
set_property -name "options.check_timing_verbose" -value "0" -objects $obj
set_property -name "options.delay_type" -value "" -objects $obj
set_property -name "options.setup" -value "0" -objects $obj
set_property -name "options.hold" -value "0" -objects $obj
set_property -name "options.max_paths" -value "" -objects $obj
set_property -name "options.nworst" -value "" -objects $obj
set_property -name "options.unique_pins" -value "0" -objects $obj
set_property -name "options.path_type" -value "" -objects $obj
set_property -name "options.slack_lesser_than" -value "" -objects $obj
set_property -name "options.report_unconstrained" -value "0" -objects $obj
set_property -name "options.warn_on_violation" -value "0" -objects $obj
set_property -name "options.significant_digits" -value "" -objects $obj
set_property -name "options.cell" -value "" -objects $obj
set_property -name "options.more_options" -value "" -objects $obj

}
# set the current impl run
current_run -implementation [get_runs impl_1]

puts "INFO: Project created:$project_name"
